[
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "AgendaDAO",
        "importPath": "AgendaDAO",
        "description": "AgendaDAO",
        "isExtraImport": true,
        "detail": "AgendaDAO",
        "documentation": {}
    },
    {
        "label": "DAO",
        "importPath": "DAO",
        "description": "DAO",
        "isExtraImport": true,
        "detail": "DAO",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "Agenda",
        "description": "Agenda",
        "isExtraImport": true,
        "detail": "Agenda",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "gauss",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gauss",
        "description": "gauss",
        "detail": "gauss",
        "documentation": {}
    },
    {
        "label": "print_file",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "print_file",
        "description": "print_file",
        "detail": "print_file",
        "documentation": {}
    },
    {
        "label": "printar",
        "importPath": "print_file",
        "description": "print_file",
        "isExtraImport": true,
        "detail": "print_file",
        "documentation": {}
    },
    {
        "label": "Narquivo",
        "importPath": "quad_arquivo",
        "description": "quad_arquivo",
        "isExtraImport": true,
        "detail": "quad_arquivo",
        "documentation": {}
    },
    {
        "label": "bisect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bisect",
        "description": "bisect",
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "PySimpleGUI",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PySimpleGUI",
        "description": "PySimpleGUI",
        "detail": "PySimpleGUI",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "Agenda_Inteligente.Agenda",
        "description": "Agenda_Inteligente.Agenda",
        "peekOfCode": "class App:\n    def __init__(self, toplevel):\n        self.mensal = ['', \"Janeiro\", \"Fevereiro\", \"Março\",\n                       \"Abril\", \"Maio\", \"Junho\", \"Julho\",\n                       \"Agosto\", \"Setembro\", \"Outubro\",\n                       \"Novembro\", \"Dezembro\"]\n        self.ano = ['']*13\n        self.display = ['']*13\n        self.nome_meses = ['']*13\n        self.dias_meses = [",
        "detail": "Agenda_Inteligente.Agenda",
        "documentation": {}
    },
    {
        "label": "AgendaDAO",
        "kind": 6,
        "importPath": "Agenda_Inteligente.AgendaDAO",
        "description": "Agenda_Inteligente.AgendaDAO",
        "peekOfCode": "class AgendaDAO(DAO):\n    def __init__(self):\n        super().__init__('agenda.pkl')\n        self.diario = [\"Dia 01\\n\", \"Dia 02\\n\", \"Dia 03\\n\",\n                       \"Dia 04\\n\", \"Dia 05\\n\", \"Dia 06\\n\",\n                       \"Dia 07\\n\", \"Dia 08\\n\", \"Dia 09\\n\",\n                       \"Dia 10\\n\", \"Dia 11\\n\", \"Dia 12\\n\",\n                       \"Dia 13\\n\", \"Dia 14\\n\", \"Dia 15\\n\",\n                       \"Dia 16\\n\", \"Dia 17\\n\", \"Dia 18\\n\",\n                       \"Dia 19\\n\", \"Dia 20\\n\", \"Dia 21\\n\",",
        "detail": "Agenda_Inteligente.AgendaDAO",
        "documentation": {}
    },
    {
        "label": "DAO",
        "kind": 6,
        "importPath": "Agenda_Inteligente.DAO",
        "description": "Agenda_Inteligente.DAO",
        "peekOfCode": "class DAO(ABC):\n    def __init__(self, datasource=''):\n        self.__datasource = datasource\n        self.__cache = {}\n        try:\n            self.__load()\n        except FileNotFoundError:\n            self.__dump()\n    def __dump(self):\n        pickle.dump(self.__cache,",
        "detail": "Agenda_Inteligente.DAO",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "Agenda_Inteligente.main",
        "description": "Agenda_Inteligente.main",
        "peekOfCode": "root = tk.Tk()\nApp(root)\nroot.attributes('-fullscreen', True)\nroot.mainloop()\n# prova Matemática_Discreta 28/06 10:10\n# trabalho Programação_Orientada_a_Objetos 11/07 13:30",
        "detail": "Agenda_Inteligente.main",
        "documentation": {}
    },
    {
        "label": "fxy",
        "kind": 2,
        "importPath": "Calculo_Numerico.EDO",
        "description": "Calculo_Numerico.EDO",
        "peekOfCode": "def fxy(x, y):\n    return -2*x - y\ndef Exato(x):\n    return -3*math.exp(-x) - 2*x + 2\ndef Euler(a, b, h, y0):\n    N = int((b - a)/h)\n    x = [a + i*h for i in range(N)]\n    y = [y0]*N\n    for i in range(N-1):\n        y[i+1] = y[i] + h*fxy(x[i], y[i])",
        "detail": "Calculo_Numerico.EDO",
        "documentation": {}
    },
    {
        "label": "Exato",
        "kind": 2,
        "importPath": "Calculo_Numerico.EDO",
        "description": "Calculo_Numerico.EDO",
        "peekOfCode": "def Exato(x):\n    return -3*math.exp(-x) - 2*x + 2\ndef Euler(a, b, h, y0):\n    N = int((b - a)/h)\n    x = [a + i*h for i in range(N)]\n    y = [y0]*N\n    for i in range(N-1):\n        y[i+1] = y[i] + h*fxy(x[i], y[i])\n    return y\ndef Runge_Kutta(a, b, h, y0):",
        "detail": "Calculo_Numerico.EDO",
        "documentation": {}
    },
    {
        "label": "Euler",
        "kind": 2,
        "importPath": "Calculo_Numerico.EDO",
        "description": "Calculo_Numerico.EDO",
        "peekOfCode": "def Euler(a, b, h, y0):\n    N = int((b - a)/h)\n    x = [a + i*h for i in range(N)]\n    y = [y0]*N\n    for i in range(N-1):\n        y[i+1] = y[i] + h*fxy(x[i], y[i])\n    return y\ndef Runge_Kutta(a, b, h, y0):\n    N = int((b - a)/h)\n    x = [(a + h*i) for i in range(N)]",
        "detail": "Calculo_Numerico.EDO",
        "documentation": {}
    },
    {
        "label": "Runge_Kutta",
        "kind": 2,
        "importPath": "Calculo_Numerico.EDO",
        "description": "Calculo_Numerico.EDO",
        "peekOfCode": "def Runge_Kutta(a, b, h, y0):\n    N = int((b - a)/h)\n    x = [(a + h*i) for i in range(N)]\n    d = [1, 2, 1, 3]\n    K = [0, 0, 0, 0]\n    y = [y0]*N\n    for i in range(N-1):\n        K[0] = h*fxy(x[i], y[i])\n        K[1] = h*fxy(x[i] + h/2, y[i] + K[0]/2)\n        K[2] = h*fxy(x[i] + h/2, y[i] + K[1]/2)",
        "detail": "Calculo_Numerico.EDO",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "Calculo_Numerico.EDO",
        "description": "Calculo_Numerico.EDO",
        "peekOfCode": "N = int((b - a)/h)\neuler = Euler(a, b, h, y0)\nrunge_kutta = Runge_Kutta(a, b, h, y0)\nexato = [Exato(a + i*h) for i in range(N)]\nerro_rk = [abs(runge_kutta[i] - exato[i]) for i in range(N)]\nerro_eul = [abs(euler[i] - exato[i]) for i in range(N)]\nprint(\"Euler =\", euler, '\\n')\nprint(\"Runge Kuta =\", runge_kutta, '\\n\\n')\nprint(\"exato =\", exato, '\\n')\nprint(\"erro Euler =\", erro_eul, '\\n')",
        "detail": "Calculo_Numerico.EDO",
        "documentation": {}
    },
    {
        "label": "euler",
        "kind": 5,
        "importPath": "Calculo_Numerico.EDO",
        "description": "Calculo_Numerico.EDO",
        "peekOfCode": "euler = Euler(a, b, h, y0)\nrunge_kutta = Runge_Kutta(a, b, h, y0)\nexato = [Exato(a + i*h) for i in range(N)]\nerro_rk = [abs(runge_kutta[i] - exato[i]) for i in range(N)]\nerro_eul = [abs(euler[i] - exato[i]) for i in range(N)]\nprint(\"Euler =\", euler, '\\n')\nprint(\"Runge Kuta =\", runge_kutta, '\\n\\n')\nprint(\"exato =\", exato, '\\n')\nprint(\"erro Euler =\", erro_eul, '\\n')\nprint(\"erro R-K =\", erro_rk)",
        "detail": "Calculo_Numerico.EDO",
        "documentation": {}
    },
    {
        "label": "runge_kutta",
        "kind": 5,
        "importPath": "Calculo_Numerico.EDO",
        "description": "Calculo_Numerico.EDO",
        "peekOfCode": "runge_kutta = Runge_Kutta(a, b, h, y0)\nexato = [Exato(a + i*h) for i in range(N)]\nerro_rk = [abs(runge_kutta[i] - exato[i]) for i in range(N)]\nerro_eul = [abs(euler[i] - exato[i]) for i in range(N)]\nprint(\"Euler =\", euler, '\\n')\nprint(\"Runge Kuta =\", runge_kutta, '\\n\\n')\nprint(\"exato =\", exato, '\\n')\nprint(\"erro Euler =\", erro_eul, '\\n')\nprint(\"erro R-K =\", erro_rk)",
        "detail": "Calculo_Numerico.EDO",
        "documentation": {}
    },
    {
        "label": "exato",
        "kind": 5,
        "importPath": "Calculo_Numerico.EDO",
        "description": "Calculo_Numerico.EDO",
        "peekOfCode": "exato = [Exato(a + i*h) for i in range(N)]\nerro_rk = [abs(runge_kutta[i] - exato[i]) for i in range(N)]\nerro_eul = [abs(euler[i] - exato[i]) for i in range(N)]\nprint(\"Euler =\", euler, '\\n')\nprint(\"Runge Kuta =\", runge_kutta, '\\n\\n')\nprint(\"exato =\", exato, '\\n')\nprint(\"erro Euler =\", erro_eul, '\\n')\nprint(\"erro R-K =\", erro_rk)",
        "detail": "Calculo_Numerico.EDO",
        "documentation": {}
    },
    {
        "label": "erro_rk",
        "kind": 5,
        "importPath": "Calculo_Numerico.EDO",
        "description": "Calculo_Numerico.EDO",
        "peekOfCode": "erro_rk = [abs(runge_kutta[i] - exato[i]) for i in range(N)]\nerro_eul = [abs(euler[i] - exato[i]) for i in range(N)]\nprint(\"Euler =\", euler, '\\n')\nprint(\"Runge Kuta =\", runge_kutta, '\\n\\n')\nprint(\"exato =\", exato, '\\n')\nprint(\"erro Euler =\", erro_eul, '\\n')\nprint(\"erro R-K =\", erro_rk)",
        "detail": "Calculo_Numerico.EDO",
        "documentation": {}
    },
    {
        "label": "erro_eul",
        "kind": 5,
        "importPath": "Calculo_Numerico.EDO",
        "description": "Calculo_Numerico.EDO",
        "peekOfCode": "erro_eul = [abs(euler[i] - exato[i]) for i in range(N)]\nprint(\"Euler =\", euler, '\\n')\nprint(\"Runge Kuta =\", runge_kutta, '\\n\\n')\nprint(\"exato =\", exato, '\\n')\nprint(\"erro Euler =\", erro_eul, '\\n')\nprint(\"erro R-K =\", erro_rk)",
        "detail": "Calculo_Numerico.EDO",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 2,
        "importPath": "Calculo_Numerico.ajuste_exponencial",
        "description": "Calculo_Numerico.ajuste_exponencial",
        "peekOfCode": "def h(x, k):\n    return x**k\ndef ln(x):\n    return math.log(x)\ndef e(x):\n    return math.exp(x)\ndef ajuste_exp(x, y):\n    n = len(x)\n    A = [[n, 0], [0, 0]]\n    b = [0, 0]",
        "detail": "Calculo_Numerico.ajuste_exponencial",
        "documentation": {}
    },
    {
        "label": "ln",
        "kind": 2,
        "importPath": "Calculo_Numerico.ajuste_exponencial",
        "description": "Calculo_Numerico.ajuste_exponencial",
        "peekOfCode": "def ln(x):\n    return math.log(x)\ndef e(x):\n    return math.exp(x)\ndef ajuste_exp(x, y):\n    n = len(x)\n    A = [[n, 0], [0, 0]]\n    b = [0, 0]\n    g = [0]*n\n    z = [ln(yy) for yy in y]",
        "detail": "Calculo_Numerico.ajuste_exponencial",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 2,
        "importPath": "Calculo_Numerico.ajuste_exponencial",
        "description": "Calculo_Numerico.ajuste_exponencial",
        "peekOfCode": "def e(x):\n    return math.exp(x)\ndef ajuste_exp(x, y):\n    n = len(x)\n    A = [[n, 0], [0, 0]]\n    b = [0, 0]\n    g = [0]*n\n    z = [ln(yy) for yy in y]\n    for i in range(n):\n        A[0][1] += x[i]",
        "detail": "Calculo_Numerico.ajuste_exponencial",
        "documentation": {}
    },
    {
        "label": "ajuste_exp",
        "kind": 2,
        "importPath": "Calculo_Numerico.ajuste_exponencial",
        "description": "Calculo_Numerico.ajuste_exponencial",
        "peekOfCode": "def ajuste_exp(x, y):\n    n = len(x)\n    A = [[n, 0], [0, 0]]\n    b = [0, 0]\n    g = [0]*n\n    z = [ln(yy) for yy in y]\n    for i in range(n):\n        A[0][1] += x[i]\n        A[1][0] += x[i]\n        b[0] += z[i]",
        "detail": "Calculo_Numerico.ajuste_exponencial",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Calculo_Numerico.ajuste_exponencial",
        "description": "Calculo_Numerico.ajuste_exponencial",
        "peekOfCode": "x = [0.2, 0.3, 0.4, 0.5,\n     0.6, 0.7, 0.8]\ny = [3.16, 2.38, 1.75, 1.34,\n     1.0, 0.74, 0.56]\ny = [2*e(2*xx) for xx in x]\nA, b, c, erro = ajuste_exp(x, y)\nprintar(A, b, c, erro)",
        "detail": "Calculo_Numerico.ajuste_exponencial",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Calculo_Numerico.ajuste_exponencial",
        "description": "Calculo_Numerico.ajuste_exponencial",
        "peekOfCode": "y = [3.16, 2.38, 1.75, 1.34,\n     1.0, 0.74, 0.56]\ny = [2*e(2*xx) for xx in x]\nA, b, c, erro = ajuste_exp(x, y)\nprintar(A, b, c, erro)",
        "detail": "Calculo_Numerico.ajuste_exponencial",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Calculo_Numerico.ajuste_exponencial",
        "description": "Calculo_Numerico.ajuste_exponencial",
        "peekOfCode": "y = [2*e(2*xx) for xx in x]\nA, b, c, erro = ajuste_exp(x, y)\nprintar(A, b, c, erro)",
        "detail": "Calculo_Numerico.ajuste_exponencial",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 2,
        "importPath": "Calculo_Numerico.ajuste_polinomial",
        "description": "Calculo_Numerico.ajuste_polinomial",
        "peekOfCode": "def h(x, k):\n    if (x == k == 0):\n        return 1\n    return x**k\ndef ajuste(x, y, M):\n    n = len(x)\n    A = [0]*(M+1)\n    b = [0]*(M+1)\n    g = [0]*n\n    for i in range(M+1):",
        "detail": "Calculo_Numerico.ajuste_polinomial",
        "documentation": {}
    },
    {
        "label": "ajuste",
        "kind": 2,
        "importPath": "Calculo_Numerico.ajuste_polinomial",
        "description": "Calculo_Numerico.ajuste_polinomial",
        "peekOfCode": "def ajuste(x, y, M):\n    n = len(x)\n    A = [0]*(M+1)\n    b = [0]*(M+1)\n    g = [0]*n\n    for i in range(M+1):\n        A[i] = [0]*(M+1)\n        for k in range(n):\n            for j in range(M+1):\n                A[i][j] += h(x[k], i)*h(x[k], j)",
        "detail": "Calculo_Numerico.ajuste_polinomial",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": "Calculo_Numerico.ajuste_polinomial",
        "description": "Calculo_Numerico.ajuste_polinomial",
        "peekOfCode": "M = 1\nx = [1.3, 3.4, 5.1, 6.8, 8]\ny = [2, 5.2, 3.8, 6.1, 5.8]\nx = [0, 20, 40, 60, 80, 100]\ny = [81.4, 77.7, 74.2, 72.4, 70.3, 68.8]\nA, b, c, erro = ajuste(x, y, M)\npf.print_com_erro(A, b, c, erro)",
        "detail": "Calculo_Numerico.ajuste_polinomial",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Calculo_Numerico.ajuste_polinomial",
        "description": "Calculo_Numerico.ajuste_polinomial",
        "peekOfCode": "x = [1.3, 3.4, 5.1, 6.8, 8]\ny = [2, 5.2, 3.8, 6.1, 5.8]\nx = [0, 20, 40, 60, 80, 100]\ny = [81.4, 77.7, 74.2, 72.4, 70.3, 68.8]\nA, b, c, erro = ajuste(x, y, M)\npf.print_com_erro(A, b, c, erro)",
        "detail": "Calculo_Numerico.ajuste_polinomial",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Calculo_Numerico.ajuste_polinomial",
        "description": "Calculo_Numerico.ajuste_polinomial",
        "peekOfCode": "y = [2, 5.2, 3.8, 6.1, 5.8]\nx = [0, 20, 40, 60, 80, 100]\ny = [81.4, 77.7, 74.2, 72.4, 70.3, 68.8]\nA, b, c, erro = ajuste(x, y, M)\npf.print_com_erro(A, b, c, erro)",
        "detail": "Calculo_Numerico.ajuste_polinomial",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Calculo_Numerico.ajuste_polinomial",
        "description": "Calculo_Numerico.ajuste_polinomial",
        "peekOfCode": "x = [0, 20, 40, 60, 80, 100]\ny = [81.4, 77.7, 74.2, 72.4, 70.3, 68.8]\nA, b, c, erro = ajuste(x, y, M)\npf.print_com_erro(A, b, c, erro)",
        "detail": "Calculo_Numerico.ajuste_polinomial",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Calculo_Numerico.ajuste_polinomial",
        "description": "Calculo_Numerico.ajuste_polinomial",
        "peekOfCode": "y = [81.4, 77.7, 74.2, 72.4, 70.3, 68.8]\nA, b, c, erro = ajuste(x, y, M)\npf.print_com_erro(A, b, c, erro)",
        "detail": "Calculo_Numerico.ajuste_polinomial",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 2,
        "importPath": "Calculo_Numerico.ajuste_potencia",
        "description": "Calculo_Numerico.ajuste_potencia",
        "peekOfCode": "def h(x, k):\n    return x**k\ndef ln(x):\n    return math.log(x)\ndef e(x):\n    return math.exp(x)\ndef ajuste_exp(x, y):\n    n = len(x)\n    A = [[n, 0], [0, 0]]\n    b = [0, 0]",
        "detail": "Calculo_Numerico.ajuste_potencia",
        "documentation": {}
    },
    {
        "label": "ln",
        "kind": 2,
        "importPath": "Calculo_Numerico.ajuste_potencia",
        "description": "Calculo_Numerico.ajuste_potencia",
        "peekOfCode": "def ln(x):\n    return math.log(x)\ndef e(x):\n    return math.exp(x)\ndef ajuste_exp(x, y):\n    n = len(x)\n    A = [[n, 0], [0, 0]]\n    b = [0, 0]\n    g = [0]*n\n    z = [ln(yy) for yy in y]",
        "detail": "Calculo_Numerico.ajuste_potencia",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 2,
        "importPath": "Calculo_Numerico.ajuste_potencia",
        "description": "Calculo_Numerico.ajuste_potencia",
        "peekOfCode": "def e(x):\n    return math.exp(x)\ndef ajuste_exp(x, y):\n    n = len(x)\n    A = [[n, 0], [0, 0]]\n    b = [0, 0]\n    g = [0]*n\n    z = [ln(yy) for yy in y]\n    for i in range(n):\n        A[0][1] += x[i]",
        "detail": "Calculo_Numerico.ajuste_potencia",
        "documentation": {}
    },
    {
        "label": "ajuste_exp",
        "kind": 2,
        "importPath": "Calculo_Numerico.ajuste_potencia",
        "description": "Calculo_Numerico.ajuste_potencia",
        "peekOfCode": "def ajuste_exp(x, y):\n    n = len(x)\n    A = [[n, 0], [0, 0]]\n    b = [0, 0]\n    g = [0]*n\n    z = [ln(yy) for yy in y]\n    for i in range(n):\n        A[0][1] += x[i]\n        A[1][0] += x[i]\n        b[0] += z[i]",
        "detail": "Calculo_Numerico.ajuste_potencia",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Calculo_Numerico.ajuste_potencia",
        "description": "Calculo_Numerico.ajuste_potencia",
        "peekOfCode": "x = [i for i in range(1, 5)]\ny = [2*(i**2) for i in x]\nA, b, c, erro = ajuste_exp(x, y)\nprintar(A, b, c, erro)",
        "detail": "Calculo_Numerico.ajuste_potencia",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Calculo_Numerico.ajuste_potencia",
        "description": "Calculo_Numerico.ajuste_potencia",
        "peekOfCode": "y = [2*(i**2) for i in x]\nA, b, c, erro = ajuste_exp(x, y)\nprintar(A, b, c, erro)",
        "detail": "Calculo_Numerico.ajuste_potencia",
        "documentation": {}
    },
    {
        "label": "birge_vieta",
        "kind": 2,
        "importPath": "Calculo_Numerico.birge_vieta",
        "description": "Calculo_Numerico.birge_vieta",
        "peekOfCode": "def birge_vieta(a, x0, erro):\n    n = len(a)\n    k = 0\n    b = [a[0]]*n\n    c = [a[0]]*(n-1)\n    while math.fabs(b[n-1]) > erro:\n        k += 1\n        for i in range(1, n-1):\n            b[i] = b[i-1]*x0 + a[i]\n            c[i] = c[i-1]*x0 + b[i]",
        "detail": "Calculo_Numerico.birge_vieta",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Calculo_Numerico.birge_vieta",
        "description": "Calculo_Numerico.birge_vieta",
        "peekOfCode": "a = [1, -9, 27, -31, 12]\nerro = 10**(-8)\nx0 = 6\nk, x0, b = birge_vieta(a, x0, erro)\nprint(k, \"iterações\")\nprint(\"x =\", x0)\nprint(\"r =\", b[-1])",
        "detail": "Calculo_Numerico.birge_vieta",
        "documentation": {}
    },
    {
        "label": "erro",
        "kind": 5,
        "importPath": "Calculo_Numerico.birge_vieta",
        "description": "Calculo_Numerico.birge_vieta",
        "peekOfCode": "erro = 10**(-8)\nx0 = 6\nk, x0, b = birge_vieta(a, x0, erro)\nprint(k, \"iterações\")\nprint(\"x =\", x0)\nprint(\"r =\", b[-1])",
        "detail": "Calculo_Numerico.birge_vieta",
        "documentation": {}
    },
    {
        "label": "x0",
        "kind": 5,
        "importPath": "Calculo_Numerico.birge_vieta",
        "description": "Calculo_Numerico.birge_vieta",
        "peekOfCode": "x0 = 6\nk, x0, b = birge_vieta(a, x0, erro)\nprint(k, \"iterações\")\nprint(\"x =\", x0)\nprint(\"r =\", b[-1])",
        "detail": "Calculo_Numerico.birge_vieta",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Calculo_Numerico.bissecao",
        "description": "Calculo_Numerico.bissecao",
        "peekOfCode": "def f(x):\n    return (math.e)**x - 2*math.cos(x)\ndef bissecao(a, b):\n    k = 0\n    erro = f(a)\n    while math.fabs(erro) >= 10**(-6):\n        k += 1\n        m = (a+b)/2\n        erro = f(m)\n        if f(a)*erro < 0:",
        "detail": "Calculo_Numerico.bissecao",
        "documentation": {}
    },
    {
        "label": "bissecao",
        "kind": 2,
        "importPath": "Calculo_Numerico.bissecao",
        "description": "Calculo_Numerico.bissecao",
        "peekOfCode": "def bissecao(a, b):\n    k = 0\n    erro = f(a)\n    while math.fabs(erro) >= 10**(-6):\n        k += 1\n        m = (a+b)/2\n        erro = f(m)\n        if f(a)*erro < 0:\n            b = m\n        else:",
        "detail": "Calculo_Numerico.bissecao",
        "documentation": {}
    },
    {
        "label": "crout",
        "kind": 2,
        "importPath": "Calculo_Numerico.crout",
        "description": "Calculo_Numerico.crout",
        "peekOfCode": "def crout(A, b):\n    n = len(b)\n    L = [0]*n\n    U = [0]*n\n    for i in range(n):\n        L[i] = [0]*n\n        U[i] = [0]*n\n        U[i][i] = 1\n    for k in range(n):\n        for i in range(k, n):",
        "detail": "Calculo_Numerico.crout",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "Calculo_Numerico.crout",
        "description": "Calculo_Numerico.crout",
        "peekOfCode": "A = [\n    [1, -2, 7, 2],\n    [2, 5, -3, 1],\n    [9, -6, 4, 1],\n    [4, -3, -6, 7]\n]\nb = [-18, 31, 35, 15]\nL, U, y, x, r = crout(A, b)\nprintar(L, U, y, x, r)",
        "detail": "Calculo_Numerico.crout",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Calculo_Numerico.crout",
        "description": "Calculo_Numerico.crout",
        "peekOfCode": "b = [-18, 31, 35, 15]\nL, U, y, x, r = crout(A, b)\nprintar(L, U, y, x, r)",
        "detail": "Calculo_Numerico.crout",
        "documentation": {}
    },
    {
        "label": "dif_div",
        "kind": 2,
        "importPath": "Calculo_Numerico.diferencas_divididas",
        "description": "Calculo_Numerico.diferencas_divididas",
        "peekOfCode": "def dif_div(ordem, xv, yv, i=0):\n    if ordem == 0:\n        return yv[i]\n    saida = dif_div(ordem-1, xv, yv, i + 1)\n    saida -= dif_div(ordem-1, xv, yv, i)\n    saida /= (xv[i + ordem] - xv[i])\n    return saida\ndef dif_div_n_rec(xv, yv):\n    n = len(xv)\n    A = [[yv[i] for i in range(n + j*0)] for j in range(n)]",
        "detail": "Calculo_Numerico.diferencas_divididas",
        "documentation": {}
    },
    {
        "label": "dif_div_n_rec",
        "kind": 2,
        "importPath": "Calculo_Numerico.diferencas_divididas",
        "description": "Calculo_Numerico.diferencas_divididas",
        "peekOfCode": "def dif_div_n_rec(xv, yv):\n    n = len(xv)\n    A = [[yv[i] for i in range(n + j*0)] for j in range(n)]\n    saida = [yv[0]]*n\n    for i in range(1, n):\n        for j in range(n-i):\n            temp = (A[i-1][j+1] - A[i-1][j])\n            A[i][j] = temp / (xv[j+i] - xv[j])\n        saida[i] = A[i][0]\n    return saida, A",
        "detail": "Calculo_Numerico.diferencas_divididas",
        "documentation": {}
    },
    {
        "label": "Newton_dif_div",
        "kind": 2,
        "importPath": "Calculo_Numerico.diferencas_divididas",
        "description": "Calculo_Numerico.diferencas_divididas",
        "peekOfCode": "def Newton_dif_div(xv, yv, x):\n    n = len(xv)\n    saida = 0\n    DD, A = dif_div_n_rec(xv, yv)\n    for i in range(n):\n        termo = DD[i]\n        for j in range(i):\n            termo *= (x - xv[j])\n        saida += termo\n    return saida, A",
        "detail": "Calculo_Numerico.diferencas_divididas",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Calculo_Numerico.falsa_pos_mod",
        "description": "Calculo_Numerico.falsa_pos_mod",
        "peekOfCode": "def f(x):\n    return ((math.e)**x) - 2*(math.cos(x))\ndef r(a, b, p, flag):\n    if not flag:\n        return a - (f(a)*(b - a) / (f(b) - f(a)))\n    elif flag == 1:\n        return a - (p*f(a)*(b - a) / (f(b) - p*f(a)))\n    else:\n        return a - (f(a)*(b - a) / (p*f(b) - f(a)))\ndef p(x1, x0):",
        "detail": "Calculo_Numerico.falsa_pos_mod",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 2,
        "importPath": "Calculo_Numerico.falsa_pos_mod",
        "description": "Calculo_Numerico.falsa_pos_mod",
        "peekOfCode": "def r(a, b, p, flag):\n    if not flag:\n        return a - (f(a)*(b - a) / (f(b) - f(a)))\n    elif flag == 1:\n        return a - (p*f(a)*(b - a) / (f(b) - p*f(a)))\n    else:\n        return a - (f(a)*(b - a) / (p*f(b) - f(a)))\ndef p(x1, x0):\n    return f(x1) / (f(x1) + f(x0))\ndef falsa_pos(a, b):",
        "detail": "Calculo_Numerico.falsa_pos_mod",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 2,
        "importPath": "Calculo_Numerico.falsa_pos_mod",
        "description": "Calculo_Numerico.falsa_pos_mod",
        "peekOfCode": "def p(x1, x0):\n    return f(x1) / (f(x1) + f(x0))\ndef falsa_pos(a, b):\n    k, erro = 0, f(a)\n    while math.fabs(erro) > 10**(-15):\n        k += 1\n        m = r(a, b, 0, 0)\n        if erro*f(a) < 0:\n            m = r(a, m, p(b, m), 1)\n            b = m",
        "detail": "Calculo_Numerico.falsa_pos_mod",
        "documentation": {}
    },
    {
        "label": "falsa_pos",
        "kind": 2,
        "importPath": "Calculo_Numerico.falsa_pos_mod",
        "description": "Calculo_Numerico.falsa_pos_mod",
        "peekOfCode": "def falsa_pos(a, b):\n    k, erro = 0, f(a)\n    while math.fabs(erro) > 10**(-15):\n        k += 1\n        m = r(a, b, 0, 0)\n        if erro*f(a) < 0:\n            m = r(a, m, p(b, m), 1)\n            b = m\n        else:\n            m = r(m, b, p(a, m), 2)",
        "detail": "Calculo_Numerico.falsa_pos_mod",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Calculo_Numerico.falsa_posicao",
        "description": "Calculo_Numerico.falsa_posicao",
        "peekOfCode": "def f(x):\n    return ((math.e)**x) - 2*(math.cos(x))\ndef r(a, b):\n    return a - (f(a)*(b - a) / (f(b) - f(a)))\ndef falsa_posicao(a, b):\n    k, erro = 0, f(a)\n    while math.fabs(erro) > 10**(-15):\n        k += 1\n        m = r(a, b)\n        erro = f(m)",
        "detail": "Calculo_Numerico.falsa_posicao",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 2,
        "importPath": "Calculo_Numerico.falsa_posicao",
        "description": "Calculo_Numerico.falsa_posicao",
        "peekOfCode": "def r(a, b):\n    return a - (f(a)*(b - a) / (f(b) - f(a)))\ndef falsa_posicao(a, b):\n    k, erro = 0, f(a)\n    while math.fabs(erro) > 10**(-15):\n        k += 1\n        m = r(a, b)\n        erro = f(m)\n        if erro*f(a) < 0:\n            b = m",
        "detail": "Calculo_Numerico.falsa_posicao",
        "documentation": {}
    },
    {
        "label": "falsa_posicao",
        "kind": 2,
        "importPath": "Calculo_Numerico.falsa_posicao",
        "description": "Calculo_Numerico.falsa_posicao",
        "peekOfCode": "def falsa_posicao(a, b):\n    k, erro = 0, f(a)\n    while math.fabs(erro) > 10**(-15):\n        k += 1\n        m = r(a, b)\n        erro = f(m)\n        if erro*f(a) < 0:\n            b = m\n        else:\n            a = m",
        "detail": "Calculo_Numerico.falsa_posicao",
        "documentation": {}
    },
    {
        "label": "pivota",
        "kind": 2,
        "importPath": "Calculo_Numerico.gauss",
        "description": "Calculo_Numerico.gauss",
        "peekOfCode": "def pivota(inicio, n, A, indices):\n    max, k = abs(A[indices[inicio]][inicio]), inicio\n    for i in range(inicio+1, n):\n        if abs(A[indices[i]][inicio]) > max:\n            max = abs(A[indices[i]][inicio])\n            k = i\n    indices[inicio], indices[k] = indices[k], indices[inicio]\ndef gauss_sem_pivo(A, b):\n    n = len(b)\n    indices = [i for i in range(n)]",
        "detail": "Calculo_Numerico.gauss",
        "documentation": {}
    },
    {
        "label": "gauss_sem_pivo",
        "kind": 2,
        "importPath": "Calculo_Numerico.gauss",
        "description": "Calculo_Numerico.gauss",
        "peekOfCode": "def gauss_sem_pivo(A, b):\n    n = len(b)\n    indices = [i for i in range(n)]\n    for k in range(n):\n        pivota(k, n, A, indices)\n        for i in range(k+1, n):\n            m = A[indices[i]][k]/A[indices[k]][k]\n            b[indices[i]] -= m*b[indices[k]]\n            for j in range(k, n):\n                A[indices[i]][j] -= m*A[indices[k]][j]",
        "detail": "Calculo_Numerico.gauss",
        "documentation": {}
    },
    {
        "label": "gauss_jacobi",
        "kind": 2,
        "importPath": "Calculo_Numerico.gauss_jacobi",
        "description": "Calculo_Numerico.gauss_jacobi",
        "peekOfCode": "def gauss_jacobi(A, b, erro, w=1):\n    n = len(A)\n    x = [0]*n\n    x0 = [0]*n\n    k = 0\n    margem = b[0]\n    while abs(margem) >= erro:\n        k += 1\n        for i in range(n):\n            x0[i] = b[i]",
        "detail": "Calculo_Numerico.gauss_jacobi",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "Calculo_Numerico.gauss_jacobi",
        "description": "Calculo_Numerico.gauss_jacobi",
        "peekOfCode": "A = [\n    [3, -1, -1],\n    [1, 3, 1],\n    [2, -2, 4]\n]\nb = [1, 5, 4]\nerro = 10**(-16)\nw = 0.7\nx, k = gauss_jacobi(A, b, erro, w)\nprint(\"A = \")",
        "detail": "Calculo_Numerico.gauss_jacobi",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Calculo_Numerico.gauss_jacobi",
        "description": "Calculo_Numerico.gauss_jacobi",
        "peekOfCode": "b = [1, 5, 4]\nerro = 10**(-16)\nw = 0.7\nx, k = gauss_jacobi(A, b, erro, w)\nprint(\"A = \")\nfor i in A:\n    print(i)\nprint(\"\\nb = \")\nprint(b, end=\"\\n\\n\")\nprint(k, \"iterações\")",
        "detail": "Calculo_Numerico.gauss_jacobi",
        "documentation": {}
    },
    {
        "label": "erro",
        "kind": 5,
        "importPath": "Calculo_Numerico.gauss_jacobi",
        "description": "Calculo_Numerico.gauss_jacobi",
        "peekOfCode": "erro = 10**(-16)\nw = 0.7\nx, k = gauss_jacobi(A, b, erro, w)\nprint(\"A = \")\nfor i in A:\n    print(i)\nprint(\"\\nb = \")\nprint(b, end=\"\\n\\n\")\nprint(k, \"iterações\")\nprint(\"\\nx = \")",
        "detail": "Calculo_Numerico.gauss_jacobi",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": "Calculo_Numerico.gauss_jacobi",
        "description": "Calculo_Numerico.gauss_jacobi",
        "peekOfCode": "w = 0.7\nx, k = gauss_jacobi(A, b, erro, w)\nprint(\"A = \")\nfor i in A:\n    print(i)\nprint(\"\\nb = \")\nprint(b, end=\"\\n\\n\")\nprint(k, \"iterações\")\nprint(\"\\nx = \")\nprint(x)",
        "detail": "Calculo_Numerico.gauss_jacobi",
        "documentation": {}
    },
    {
        "label": "print(\"A",
        "kind": 5,
        "importPath": "Calculo_Numerico.gauss_jacobi",
        "description": "Calculo_Numerico.gauss_jacobi",
        "peekOfCode": "print(\"A = \")\nfor i in A:\n    print(i)\nprint(\"\\nb = \")\nprint(b, end=\"\\n\\n\")\nprint(k, \"iterações\")\nprint(\"\\nx = \")\nprint(x)",
        "detail": "Calculo_Numerico.gauss_jacobi",
        "documentation": {}
    },
    {
        "label": "print(\"\\nb",
        "kind": 5,
        "importPath": "Calculo_Numerico.gauss_jacobi",
        "description": "Calculo_Numerico.gauss_jacobi",
        "peekOfCode": "print(\"\\nb = \")\nprint(b, end=\"\\n\\n\")\nprint(k, \"iterações\")\nprint(\"\\nx = \")\nprint(x)",
        "detail": "Calculo_Numerico.gauss_jacobi",
        "documentation": {}
    },
    {
        "label": "print(\"\\nx",
        "kind": 5,
        "importPath": "Calculo_Numerico.gauss_jacobi",
        "description": "Calculo_Numerico.gauss_jacobi",
        "peekOfCode": "print(\"\\nx = \")\nprint(x)",
        "detail": "Calculo_Numerico.gauss_jacobi",
        "documentation": {}
    },
    {
        "label": "pivota",
        "kind": 2,
        "importPath": "Calculo_Numerico.gauss_pivo",
        "description": "Calculo_Numerico.gauss_pivo",
        "peekOfCode": "def pivota(inicio, n, A, b, indices):\n    max, k = abs(A[inicio][inicio]), inicio\n    for i in range(inicio, n):\n        if abs(A[i][inicio]) > max:\n            max = abs(A[i][inicio])\n            k = i\n    A[inicio], A[k] = A[k], A[inicio]\n    b[inicio], b[k] = b[k], b[inicio]\n    indices[inicio], indices[k] = indices[k], indices[inicio]\ndef gauss(A, b):",
        "detail": "Calculo_Numerico.gauss_pivo",
        "documentation": {}
    },
    {
        "label": "gauss",
        "kind": 2,
        "importPath": "Calculo_Numerico.gauss_pivo",
        "description": "Calculo_Numerico.gauss_pivo",
        "peekOfCode": "def gauss(A, b):\n    n = len(b)\n    indices = [i for i in range(n)]\n    for k in range(n):\n        pivota(k, n, A, b, indices)\n        for i in range(k+1, n):\n            m = A[i][k]/A[k][k]\n            b[i] -= m*b[k]\n            for j in range(k, n):\n                A[i][j] -= m*A[k][j]",
        "detail": "Calculo_Numerico.gauss_pivo",
        "documentation": {}
    },
    {
        "label": "flag",
        "kind": 5,
        "importPath": "Calculo_Numerico.gauss_pivo",
        "description": "Calculo_Numerico.gauss_pivo",
        "peekOfCode": "flag = 1\nif flag == 0:\n    A = [\n        [1, 1, 1.5, 1, 1.5, 0, 0, 0, 0, 0],\n        [0, 1, 0.01, 0.51, 1.5, 0.5, 0, 0, 0, 0],\n        [2.9, 1, 2, 1, 1, 0, 5, 0, 0, 0],\n        [9, 1, 0.2, 1, 1, 0, 0, 1.5, 0, 0],\n        [1, 0, 2, 0, 0, 1, 1, 1, 0, 2],\n        [0, 1, 0, 0, -2, 0, 1, -1, 1, 1],\n        [1, 0, 2, 0, 0, 0, 1, 1, 1, 0],",
        "detail": "Calculo_Numerico.gauss_pivo",
        "documentation": {}
    },
    {
        "label": "gauss_seidel",
        "kind": 2,
        "importPath": "Calculo_Numerico.gauss_seidel",
        "description": "Calculo_Numerico.gauss_seidel",
        "peekOfCode": "def gauss_seidel(A, b, erro, w=1):\n    n = len(A)\n    x = [0]*n\n    k = 0\n    margem = b[0]\n    while abs(margem) >= erro:\n        k += 1\n        for i in range(n):\n            x0 = x[i]\n            x[i] = b[i]",
        "detail": "Calculo_Numerico.gauss_seidel",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "Calculo_Numerico.gauss_seidel",
        "description": "Calculo_Numerico.gauss_seidel",
        "peekOfCode": "A = [\n    [3, -1, -1],\n    [1, 3, 1],\n    [2, -2, 4]\n]\nb = [1, 5, 4]\nerro = 10**(-16)\nw = 0.85\nx, k = gauss_seidel(A, b, erro, w)\nprint(\"A = \")",
        "detail": "Calculo_Numerico.gauss_seidel",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Calculo_Numerico.gauss_seidel",
        "description": "Calculo_Numerico.gauss_seidel",
        "peekOfCode": "b = [1, 5, 4]\nerro = 10**(-16)\nw = 0.85\nx, k = gauss_seidel(A, b, erro, w)\nprint(\"A = \")\nfor i in A:\n    print(i)\nprint(\"\\nb = \")\nprint(b, end=\"\\n\\n\")\nprint(k, \"iterações\")",
        "detail": "Calculo_Numerico.gauss_seidel",
        "documentation": {}
    },
    {
        "label": "erro",
        "kind": 5,
        "importPath": "Calculo_Numerico.gauss_seidel",
        "description": "Calculo_Numerico.gauss_seidel",
        "peekOfCode": "erro = 10**(-16)\nw = 0.85\nx, k = gauss_seidel(A, b, erro, w)\nprint(\"A = \")\nfor i in A:\n    print(i)\nprint(\"\\nb = \")\nprint(b, end=\"\\n\\n\")\nprint(k, \"iterações\")\nprint(\"\\nx = \")",
        "detail": "Calculo_Numerico.gauss_seidel",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": "Calculo_Numerico.gauss_seidel",
        "description": "Calculo_Numerico.gauss_seidel",
        "peekOfCode": "w = 0.85\nx, k = gauss_seidel(A, b, erro, w)\nprint(\"A = \")\nfor i in A:\n    print(i)\nprint(\"\\nb = \")\nprint(b, end=\"\\n\\n\")\nprint(k, \"iterações\")\nprint(\"\\nx = \")\nprint(x)",
        "detail": "Calculo_Numerico.gauss_seidel",
        "documentation": {}
    },
    {
        "label": "print(\"A",
        "kind": 5,
        "importPath": "Calculo_Numerico.gauss_seidel",
        "description": "Calculo_Numerico.gauss_seidel",
        "peekOfCode": "print(\"A = \")\nfor i in A:\n    print(i)\nprint(\"\\nb = \")\nprint(b, end=\"\\n\\n\")\nprint(k, \"iterações\")\nprint(\"\\nx = \")\nprint(x)",
        "detail": "Calculo_Numerico.gauss_seidel",
        "documentation": {}
    },
    {
        "label": "print(\"\\nb",
        "kind": 5,
        "importPath": "Calculo_Numerico.gauss_seidel",
        "description": "Calculo_Numerico.gauss_seidel",
        "peekOfCode": "print(\"\\nb = \")\nprint(b, end=\"\\n\\n\")\nprint(k, \"iterações\")\nprint(\"\\nx = \")\nprint(x)",
        "detail": "Calculo_Numerico.gauss_seidel",
        "documentation": {}
    },
    {
        "label": "print(\"\\nx",
        "kind": 5,
        "importPath": "Calculo_Numerico.gauss_seidel",
        "description": "Calculo_Numerico.gauss_seidel",
        "peekOfCode": "print(\"\\nx = \")\nprint(x)",
        "detail": "Calculo_Numerico.gauss_seidel",
        "documentation": {}
    },
    {
        "label": "interpola",
        "kind": 2,
        "importPath": "Calculo_Numerico.interpolacao_linear",
        "description": "Calculo_Numerico.interpolacao_linear",
        "peekOfCode": "def interpola(x, y, x0):\n    n = len(x)\n    A = [0]*n\n    for i in range(n):\n        A[i] = [1]*n\n        for j in range(1, n):\n            A[i][j] = x[i]**j\n    F = gauss.gauss_sem_pivo(A, y)\n    x1 = F[0]\n    for i in range(1, n):",
        "detail": "Calculo_Numerico.interpolacao_linear",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Calculo_Numerico.interpolacao_linear",
        "description": "Calculo_Numerico.interpolacao_linear",
        "peekOfCode": "x = [-3, -2, 1, 3]\ny = [-1, 2, -1, 10]\nx = [-1, 0, 1]\ny = [4, 1, -1]\nx0 = 2\nx1 = interpola(x, y, x0)\nprint(\"f(x) =\", x1)",
        "detail": "Calculo_Numerico.interpolacao_linear",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Calculo_Numerico.interpolacao_linear",
        "description": "Calculo_Numerico.interpolacao_linear",
        "peekOfCode": "y = [-1, 2, -1, 10]\nx = [-1, 0, 1]\ny = [4, 1, -1]\nx0 = 2\nx1 = interpola(x, y, x0)\nprint(\"f(x) =\", x1)",
        "detail": "Calculo_Numerico.interpolacao_linear",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Calculo_Numerico.interpolacao_linear",
        "description": "Calculo_Numerico.interpolacao_linear",
        "peekOfCode": "x = [-1, 0, 1]\ny = [4, 1, -1]\nx0 = 2\nx1 = interpola(x, y, x0)\nprint(\"f(x) =\", x1)",
        "detail": "Calculo_Numerico.interpolacao_linear",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Calculo_Numerico.interpolacao_linear",
        "description": "Calculo_Numerico.interpolacao_linear",
        "peekOfCode": "y = [4, 1, -1]\nx0 = 2\nx1 = interpola(x, y, x0)\nprint(\"f(x) =\", x1)",
        "detail": "Calculo_Numerico.interpolacao_linear",
        "documentation": {}
    },
    {
        "label": "x0",
        "kind": 5,
        "importPath": "Calculo_Numerico.interpolacao_linear",
        "description": "Calculo_Numerico.interpolacao_linear",
        "peekOfCode": "x0 = 2\nx1 = interpola(x, y, x0)\nprint(\"f(x) =\", x1)",
        "detail": "Calculo_Numerico.interpolacao_linear",
        "documentation": {}
    },
    {
        "label": "x1",
        "kind": 5,
        "importPath": "Calculo_Numerico.interpolacao_linear",
        "description": "Calculo_Numerico.interpolacao_linear",
        "peekOfCode": "x1 = interpola(x, y, x0)\nprint(\"f(x) =\", x1)",
        "detail": "Calculo_Numerico.interpolacao_linear",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 2,
        "importPath": "Calculo_Numerico.lagrange",
        "description": "Calculo_Numerico.lagrange",
        "peekOfCode": "def L(n, x, k, xv):\n    saidaN = saidaD = 1\n    for i in range(k):\n        saidaN *= (x - xv[i])\n        saidaD *= (xv[k] - xv[i])\n    for i in range(k+1, n):\n        saidaN *= (x - xv[i])\n        saidaD *= (xv[k] - xv[i])\n    return saidaN/saidaD\ndef Lagrange(x, xv, yv):",
        "detail": "Calculo_Numerico.lagrange",
        "documentation": {}
    },
    {
        "label": "Lagrange",
        "kind": 2,
        "importPath": "Calculo_Numerico.lagrange",
        "description": "Calculo_Numerico.lagrange",
        "peekOfCode": "def Lagrange(x, xv, yv):\n    saida = 0\n    n = len(xv)\n    for i in range(n):\n        saida += yv[i]*L(n, x, i, xv)\n    return saida\nxv, yv, x = [-3, -2, 1, 3], [-1, 2, -1, 10], 2\nprint(Lagrange(x, xv, yv))\nxv, yv, x = [-1, 0, 2], [4, 1, -1], 1\nprint(Lagrange(x, xv, yv))",
        "detail": "Calculo_Numerico.lagrange",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Calculo_Numerico.newton",
        "description": "Calculo_Numerico.newton",
        "peekOfCode": "def f(x):\n    return (math.e)**x - 4*x*x\ndef df(x):\n    return (math.e)**x - 8*x\ndef Newton(x0, erro):\n    k = 0\n    m = x0\n    while math.fabs(f(m)) >= erro:\n        m = m - f(m)/df(m)\n        k += 1",
        "detail": "Calculo_Numerico.newton",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 2,
        "importPath": "Calculo_Numerico.newton",
        "description": "Calculo_Numerico.newton",
        "peekOfCode": "def df(x):\n    return (math.e)**x - 8*x\ndef Newton(x0, erro):\n    k = 0\n    m = x0\n    while math.fabs(f(m)) >= erro:\n        m = m - f(m)/df(m)\n        k += 1\n    return m, k\nx0, erro = 1, 10**(-6)",
        "detail": "Calculo_Numerico.newton",
        "documentation": {}
    },
    {
        "label": "Newton",
        "kind": 2,
        "importPath": "Calculo_Numerico.newton",
        "description": "Calculo_Numerico.newton",
        "peekOfCode": "def Newton(x0, erro):\n    k = 0\n    m = x0\n    while math.fabs(f(m)) >= erro:\n        m = m - f(m)/df(m)\n        k += 1\n    return m, k\nx0, erro = 1, 10**(-6)\nx, k = Newton(x0, erro)\nprint(k, \"iterações\")",
        "detail": "Calculo_Numerico.newton",
        "documentation": {}
    },
    {
        "label": "printFloat",
        "kind": 2,
        "importPath": "Calculo_Numerico.print_file",
        "description": "Calculo_Numerico.print_file",
        "peekOfCode": "def printFloat(x):\n    print(\"%.5f\" % x, end=' ')\ndef printR(r, n):\n    print(\"r =\")\n    for i in range(n):\n        printFloat(r[i])\n    print(\"\\n\")\ndef confere(A, b, x, n, indices=[]):\n    if len(indices) != n:\n        indices = [i for i in range(n)]",
        "detail": "Calculo_Numerico.print_file",
        "documentation": {}
    },
    {
        "label": "printR",
        "kind": 2,
        "importPath": "Calculo_Numerico.print_file",
        "description": "Calculo_Numerico.print_file",
        "peekOfCode": "def printR(r, n):\n    print(\"r =\")\n    for i in range(n):\n        printFloat(r[i])\n    print(\"\\n\")\ndef confere(A, b, x, n, indices=[]):\n    if len(indices) != n:\n        indices = [i for i in range(n)]\n    r = [i for i in b]\n    print(\"conferindo:\")",
        "detail": "Calculo_Numerico.print_file",
        "documentation": {}
    },
    {
        "label": "confere",
        "kind": 2,
        "importPath": "Calculo_Numerico.print_file",
        "description": "Calculo_Numerico.print_file",
        "peekOfCode": "def confere(A, b, x, n, indices=[]):\n    if len(indices) != n:\n        indices = [i for i in range(n)]\n    r = [i for i in b]\n    print(\"conferindo:\")\n    for i in range(n-1, -1, -1):\n        temp = 0\n        for j in range(n-1, -1, -1):\n            temp += A[indices[i]][j]*x[j]\n        print(\"b[%d] =\" % i, end=' ')",
        "detail": "Calculo_Numerico.print_file",
        "documentation": {}
    },
    {
        "label": "printA",
        "kind": 2,
        "importPath": "Calculo_Numerico.print_file",
        "description": "Calculo_Numerico.print_file",
        "peekOfCode": "def printA(A, n):\n    print(\"Matriz =\")\n    for i in range(n):\n        for j in range(n):\n            printFloat(A[i][j])\n        print('\\n\\n')\n    print()\ndef printB(b, n):\n    print(\"b =\")\n    for i in range(n):",
        "detail": "Calculo_Numerico.print_file",
        "documentation": {}
    },
    {
        "label": "printB",
        "kind": 2,
        "importPath": "Calculo_Numerico.print_file",
        "description": "Calculo_Numerico.print_file",
        "peekOfCode": "def printB(b, n):\n    print(\"b =\")\n    for i in range(n):\n        printFloat(b[i])\n    print(\"\\n\")\ndef printX(x, n):\n    print(\"x =\")\n    for i in range(n):\n        printFloat(x[i])\n    print(\"\\n\")",
        "detail": "Calculo_Numerico.print_file",
        "documentation": {}
    },
    {
        "label": "printX",
        "kind": 2,
        "importPath": "Calculo_Numerico.print_file",
        "description": "Calculo_Numerico.print_file",
        "peekOfCode": "def printX(x, n):\n    print(\"x =\")\n    for i in range(n):\n        printFloat(x[i])\n    print(\"\\n\")\ndef printIndices(o, n):\n    print(\"índices =\", end=' ')\n    for i in range(n):\n        print('%d' % (o[i]), end=' ')\n    print(\"\\n\")",
        "detail": "Calculo_Numerico.print_file",
        "documentation": {}
    },
    {
        "label": "printIndices",
        "kind": 2,
        "importPath": "Calculo_Numerico.print_file",
        "description": "Calculo_Numerico.print_file",
        "peekOfCode": "def printIndices(o, n):\n    print(\"índices =\", end=' ')\n    for i in range(n):\n        print('%d' % (o[i]), end=' ')\n    print(\"\\n\")\ndef printar(A, b, x, flag0=0, o=[], flag1=0):\n    n = len(b)\n    printA(A, n)\n    printB(b, n)\n    printX(x, n)",
        "detail": "Calculo_Numerico.print_file",
        "documentation": {}
    },
    {
        "label": "printar",
        "kind": 2,
        "importPath": "Calculo_Numerico.print_file",
        "description": "Calculo_Numerico.print_file",
        "peekOfCode": "def printar(A, b, x, flag0=0, o=[], flag1=0):\n    n = len(b)\n    printA(A, n)\n    printB(b, n)\n    printX(x, n)\n    if flag0 == 1:\n        confere(A, b, x, n, o)\n    if flag1 == 1:\n        printIndices(o, n)\ndef print_com_erro(A, b, c, erro):",
        "detail": "Calculo_Numerico.print_file",
        "documentation": {}
    },
    {
        "label": "print_com_erro",
        "kind": 2,
        "importPath": "Calculo_Numerico.print_file",
        "description": "Calculo_Numerico.print_file",
        "peekOfCode": "def print_com_erro(A, b, c, erro):\n    print(\"A =\")\n    print(A[0])\n    print(A[1])\n    print(\"\\nb =\")\n    print(b)\n    print(\"\\nc =\")\n    print(c)\n    print(\"\\nerro =\")\n    print(erro)",
        "detail": "Calculo_Numerico.print_file",
        "documentation": {}
    },
    {
        "label": "n0",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n0 = [[1], [1]]\nn1 = [[0], [2]]\nn2 = [[1, 1], [-(3)**(-1/2), (3)**(-1/2)]]\nn3 = [[0.8888888888888888,\n       0.5555555555555556,\n       0.5555555555555556],\n      [0, -0.7745966692414834,\n      0.7745966692414834]\n      ]\nn4 = [[0.6521451548625461, 0.6521451548625461,",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n1",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n1 = [[0], [2]]\nn2 = [[1, 1], [-(3)**(-1/2), (3)**(-1/2)]]\nn3 = [[0.8888888888888888,\n       0.5555555555555556,\n       0.5555555555555556],\n      [0, -0.7745966692414834,\n      0.7745966692414834]\n      ]\nn4 = [[0.6521451548625461, 0.6521451548625461,\n       0.3478548451374538, 0.3478548451374538],",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n2",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n2 = [[1, 1], [-(3)**(-1/2), (3)**(-1/2)]]\nn3 = [[0.8888888888888888,\n       0.5555555555555556,\n       0.5555555555555556],\n      [0, -0.7745966692414834,\n      0.7745966692414834]\n      ]\nn4 = [[0.6521451548625461, 0.6521451548625461,\n       0.3478548451374538, 0.3478548451374538],\n      [-0.3399810435848563, 0.3399810435848563,",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n3",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n3 = [[0.8888888888888888,\n       0.5555555555555556,\n       0.5555555555555556],\n      [0, -0.7745966692414834,\n      0.7745966692414834]\n      ]\nn4 = [[0.6521451548625461, 0.6521451548625461,\n       0.3478548451374538, 0.3478548451374538],\n      [-0.3399810435848563, 0.3399810435848563,\n       -0.8611363115940526, 0.8611363115940526]]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n4",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n4 = [[0.6521451548625461, 0.6521451548625461,\n       0.3478548451374538, 0.3478548451374538],\n      [-0.3399810435848563, 0.3399810435848563,\n       -0.8611363115940526, 0.8611363115940526]]\nn5 = [[0.5688888888888889, 0.4786286704993665,\n       0.4786286704993665, 0.2369268850561891,\n       0.2369268850561891], [0, -0.5384693101056831,\n                             0.5384693101056831, -0.9061798459386640,\n                             0.9061798459386640]]\nn6 = [[0.3607615730481386, 0.3607615730481386,",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n5",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n5 = [[0.5688888888888889, 0.4786286704993665,\n       0.4786286704993665, 0.2369268850561891,\n       0.2369268850561891], [0, -0.5384693101056831,\n                             0.5384693101056831, -0.9061798459386640,\n                             0.9061798459386640]]\nn6 = [[0.3607615730481386, 0.3607615730481386,\n       0.4679139345726910, 0.4679139345726910,\n       0.1713244923791704, 0.1713244923791704],\n      [0.6612093864662645, -0.6612093864662645,\n       -0.2386191860831969, 0.2386191860831969",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n6",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n6 = [[0.3607615730481386, 0.3607615730481386,\n       0.4679139345726910, 0.4679139345726910,\n       0.1713244923791704, 0.1713244923791704],\n      [0.6612093864662645, -0.6612093864662645,\n       -0.2386191860831969, 0.2386191860831969\n       - 0.9324695142031521,  0.9324695142031521]]\nn7 = [[0.4179591836734694, 0.3818300505051189,\n       0.3818300505051189, 0.2797053914892766,\n       0.2797053914892766, 0.1294849661688697,\n       0.1294849661688697], [0, 0.4058451513773972,",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n7",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n7 = [[0.4179591836734694, 0.3818300505051189,\n       0.3818300505051189, 0.2797053914892766,\n       0.2797053914892766, 0.1294849661688697,\n       0.1294849661688697], [0, 0.4058451513773972,\n                             -0.4058451513773972, -0.7415311855993945,\n                             0.7415311855993945, -0.9491079123427585,\n                             0.9491079123427585]]\nn8 = [[], []]\nn9 = [[], []]\nn10 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n8",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n8 = [[], []]\nn9 = [[], []]\nn10 = [[], []]\nn11 = [[], []]\nn12 = [[], []]\nn13 = [[], []]\nn14 = [[], []]\nn15 = [[], []]\nn16 = [[], []]\nn17 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n9",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n9 = [[], []]\nn10 = [[], []]\nn11 = [[], []]\nn12 = [[], []]\nn13 = [[], []]\nn14 = [[], []]\nn15 = [[], []]\nn16 = [[], []]\nn17 = [[], []]\nn18 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n10",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n10 = [[], []]\nn11 = [[], []]\nn12 = [[], []]\nn13 = [[], []]\nn14 = [[], []]\nn15 = [[], []]\nn16 = [[], []]\nn17 = [[], []]\nn18 = [[], []]\nn19 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n11",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n11 = [[], []]\nn12 = [[], []]\nn13 = [[], []]\nn14 = [[], []]\nn15 = [[], []]\nn16 = [[], []]\nn17 = [[], []]\nn18 = [[], []]\nn19 = [[], []]\nn20 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n12",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n12 = [[], []]\nn13 = [[], []]\nn14 = [[], []]\nn15 = [[], []]\nn16 = [[], []]\nn17 = [[], []]\nn18 = [[], []]\nn19 = [[], []]\nn20 = [[], []]\nn21 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n13",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n13 = [[], []]\nn14 = [[], []]\nn15 = [[], []]\nn16 = [[], []]\nn17 = [[], []]\nn18 = [[], []]\nn19 = [[], []]\nn20 = [[], []]\nn21 = [[], []]\nn22 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n14",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n14 = [[], []]\nn15 = [[], []]\nn16 = [[], []]\nn17 = [[], []]\nn18 = [[], []]\nn19 = [[], []]\nn20 = [[], []]\nn21 = [[], []]\nn22 = [[], []]\nn23 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n15",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n15 = [[], []]\nn16 = [[], []]\nn17 = [[], []]\nn18 = [[], []]\nn19 = [[], []]\nn20 = [[], []]\nn21 = [[], []]\nn22 = [[], []]\nn23 = [[], []]\nn24 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n16",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n16 = [[], []]\nn17 = [[], []]\nn18 = [[], []]\nn19 = [[], []]\nn20 = [[], []]\nn21 = [[], []]\nn22 = [[], []]\nn23 = [[], []]\nn24 = [[], []]\nn25 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n17",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n17 = [[], []]\nn18 = [[], []]\nn19 = [[], []]\nn20 = [[], []]\nn21 = [[], []]\nn22 = [[], []]\nn23 = [[], []]\nn24 = [[], []]\nn25 = [[], []]\nn26 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n18",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n18 = [[], []]\nn19 = [[], []]\nn20 = [[], []]\nn21 = [[], []]\nn22 = [[], []]\nn23 = [[], []]\nn24 = [[], []]\nn25 = [[], []]\nn26 = [[], []]\nn27 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n19",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n19 = [[], []]\nn20 = [[], []]\nn21 = [[], []]\nn22 = [[], []]\nn23 = [[], []]\nn24 = [[], []]\nn25 = [[], []]\nn26 = [[], []]\nn27 = [[], []]\nn28 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n20",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n20 = [[], []]\nn21 = [[], []]\nn22 = [[], []]\nn23 = [[], []]\nn24 = [[], []]\nn25 = [[], []]\nn26 = [[], []]\nn27 = [[], []]\nn28 = [[], []]\nn29 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n21",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n21 = [[], []]\nn22 = [[], []]\nn23 = [[], []]\nn24 = [[], []]\nn25 = [[], []]\nn26 = [[], []]\nn27 = [[], []]\nn28 = [[], []]\nn29 = [[], []]\nn30 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n22",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n22 = [[], []]\nn23 = [[], []]\nn24 = [[], []]\nn25 = [[], []]\nn26 = [[], []]\nn27 = [[], []]\nn28 = [[], []]\nn29 = [[], []]\nn30 = [[], []]\nn31 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n23",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n23 = [[], []]\nn24 = [[], []]\nn25 = [[], []]\nn26 = [[], []]\nn27 = [[], []]\nn28 = [[], []]\nn29 = [[], []]\nn30 = [[], []]\nn31 = [[], []]\nn32 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n24",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n24 = [[], []]\nn25 = [[], []]\nn26 = [[], []]\nn27 = [[], []]\nn28 = [[], []]\nn29 = [[], []]\nn30 = [[], []]\nn31 = [[], []]\nn32 = [[], []]\nn33 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n25",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n25 = [[], []]\nn26 = [[], []]\nn27 = [[], []]\nn28 = [[], []]\nn29 = [[], []]\nn30 = [[], []]\nn31 = [[], []]\nn32 = [[], []]\nn33 = [[], []]\nn34 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n26",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n26 = [[], []]\nn27 = [[], []]\nn28 = [[], []]\nn29 = [[], []]\nn30 = [[], []]\nn31 = [[], []]\nn32 = [[], []]\nn33 = [[], []]\nn34 = [[], []]\nn35 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n27",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n27 = [[], []]\nn28 = [[], []]\nn29 = [[], []]\nn30 = [[], []]\nn31 = [[], []]\nn32 = [[], []]\nn33 = [[], []]\nn34 = [[], []]\nn35 = [[], []]\nn36 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n28",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n28 = [[], []]\nn29 = [[], []]\nn30 = [[], []]\nn31 = [[], []]\nn32 = [[], []]\nn33 = [[], []]\nn34 = [[], []]\nn35 = [[], []]\nn36 = [[], []]\nn37 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n29",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n29 = [[], []]\nn30 = [[], []]\nn31 = [[], []]\nn32 = [[], []]\nn33 = [[], []]\nn34 = [[], []]\nn35 = [[], []]\nn36 = [[], []]\nn37 = [[], []]\nn38 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n30",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n30 = [[], []]\nn31 = [[], []]\nn32 = [[], []]\nn33 = [[], []]\nn34 = [[], []]\nn35 = [[], []]\nn36 = [[], []]\nn37 = [[], []]\nn38 = [[], []]\nn39 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n31",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n31 = [[], []]\nn32 = [[], []]\nn33 = [[], []]\nn34 = [[], []]\nn35 = [[], []]\nn36 = [[], []]\nn37 = [[], []]\nn38 = [[], []]\nn39 = [[], []]\nn40 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n32",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n32 = [[], []]\nn33 = [[], []]\nn34 = [[], []]\nn35 = [[], []]\nn36 = [[], []]\nn37 = [[], []]\nn38 = [[], []]\nn39 = [[], []]\nn40 = [[], []]\nn41 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n33",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n33 = [[], []]\nn34 = [[], []]\nn35 = [[], []]\nn36 = [[], []]\nn37 = [[], []]\nn38 = [[], []]\nn39 = [[], []]\nn40 = [[], []]\nn41 = [[], []]\nn42 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n34",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n34 = [[], []]\nn35 = [[], []]\nn36 = [[], []]\nn37 = [[], []]\nn38 = [[], []]\nn39 = [[], []]\nn40 = [[], []]\nn41 = [[], []]\nn42 = [[], []]\nn43 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n35",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n35 = [[], []]\nn36 = [[], []]\nn37 = [[], []]\nn38 = [[], []]\nn39 = [[], []]\nn40 = [[], []]\nn41 = [[], []]\nn42 = [[], []]\nn43 = [[], []]\nn44 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n36",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n36 = [[], []]\nn37 = [[], []]\nn38 = [[], []]\nn39 = [[], []]\nn40 = [[], []]\nn41 = [[], []]\nn42 = [[], []]\nn43 = [[], []]\nn44 = [[], []]\nn45 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n37",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n37 = [[], []]\nn38 = [[], []]\nn39 = [[], []]\nn40 = [[], []]\nn41 = [[], []]\nn42 = [[], []]\nn43 = [[], []]\nn44 = [[], []]\nn45 = [[], []]\nn46 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n38",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n38 = [[], []]\nn39 = [[], []]\nn40 = [[], []]\nn41 = [[], []]\nn42 = [[], []]\nn43 = [[], []]\nn44 = [[], []]\nn45 = [[], []]\nn46 = [[], []]\nn47 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n39",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n39 = [[], []]\nn40 = [[], []]\nn41 = [[], []]\nn42 = [[], []]\nn43 = [[], []]\nn44 = [[], []]\nn45 = [[], []]\nn46 = [[], []]\nn47 = [[], []]\nn48 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n40",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n40 = [[], []]\nn41 = [[], []]\nn42 = [[], []]\nn43 = [[], []]\nn44 = [[], []]\nn45 = [[], []]\nn46 = [[], []]\nn47 = [[], []]\nn48 = [[], []]\nn49 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n41",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n41 = [[], []]\nn42 = [[], []]\nn43 = [[], []]\nn44 = [[], []]\nn45 = [[], []]\nn46 = [[], []]\nn47 = [[], []]\nn48 = [[], []]\nn49 = [[], []]\nn50 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n42",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n42 = [[], []]\nn43 = [[], []]\nn44 = [[], []]\nn45 = [[], []]\nn46 = [[], []]\nn47 = [[], []]\nn48 = [[], []]\nn49 = [[], []]\nn50 = [[], []]\nn51 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n43",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n43 = [[], []]\nn44 = [[], []]\nn45 = [[], []]\nn46 = [[], []]\nn47 = [[], []]\nn48 = [[], []]\nn49 = [[], []]\nn50 = [[], []]\nn51 = [[], []]\nn52 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n44",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n44 = [[], []]\nn45 = [[], []]\nn46 = [[], []]\nn47 = [[], []]\nn48 = [[], []]\nn49 = [[], []]\nn50 = [[], []]\nn51 = [[], []]\nn52 = [[], []]\nn53 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n45",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n45 = [[], []]\nn46 = [[], []]\nn47 = [[], []]\nn48 = [[], []]\nn49 = [[], []]\nn50 = [[], []]\nn51 = [[], []]\nn52 = [[], []]\nn53 = [[], []]\nn54 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n46",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n46 = [[], []]\nn47 = [[], []]\nn48 = [[], []]\nn49 = [[], []]\nn50 = [[], []]\nn51 = [[], []]\nn52 = [[], []]\nn53 = [[], []]\nn54 = [[], []]\nn55 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n47",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n47 = [[], []]\nn48 = [[], []]\nn49 = [[], []]\nn50 = [[], []]\nn51 = [[], []]\nn52 = [[], []]\nn53 = [[], []]\nn54 = [[], []]\nn55 = [[], []]\nn56 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n48",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n48 = [[], []]\nn49 = [[], []]\nn50 = [[], []]\nn51 = [[], []]\nn52 = [[], []]\nn53 = [[], []]\nn54 = [[], []]\nn55 = [[], []]\nn56 = [[], []]\nn57 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n49",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n49 = [[], []]\nn50 = [[], []]\nn51 = [[], []]\nn52 = [[], []]\nn53 = [[], []]\nn54 = [[], []]\nn55 = [[], []]\nn56 = [[], []]\nn57 = [[], []]\nn58 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n50",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n50 = [[], []]\nn51 = [[], []]\nn52 = [[], []]\nn53 = [[], []]\nn54 = [[], []]\nn55 = [[], []]\nn56 = [[], []]\nn57 = [[], []]\nn58 = [[], []]\nn59 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n51",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n51 = [[], []]\nn52 = [[], []]\nn53 = [[], []]\nn54 = [[], []]\nn55 = [[], []]\nn56 = [[], []]\nn57 = [[], []]\nn58 = [[], []]\nn59 = [[], []]\nn60 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n52",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n52 = [[], []]\nn53 = [[], []]\nn54 = [[], []]\nn55 = [[], []]\nn56 = [[], []]\nn57 = [[], []]\nn58 = [[], []]\nn59 = [[], []]\nn60 = [[], []]\nn61 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n53",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n53 = [[], []]\nn54 = [[], []]\nn55 = [[], []]\nn56 = [[], []]\nn57 = [[], []]\nn58 = [[], []]\nn59 = [[], []]\nn60 = [[], []]\nn61 = [[], []]\nn62 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n54",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n54 = [[], []]\nn55 = [[], []]\nn56 = [[], []]\nn57 = [[], []]\nn58 = [[], []]\nn59 = [[], []]\nn60 = [[], []]\nn61 = [[], []]\nn62 = [[], []]\nn63 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n55",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n55 = [[], []]\nn56 = [[], []]\nn57 = [[], []]\nn58 = [[], []]\nn59 = [[], []]\nn60 = [[], []]\nn61 = [[], []]\nn62 = [[], []]\nn63 = [[], []]\nn64 = [[], []]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n56",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n56 = [[], []]\nn57 = [[], []]\nn58 = [[], []]\nn59 = [[], []]\nn60 = [[], []]\nn61 = [[], []]\nn62 = [[], []]\nn63 = [[], []]\nn64 = [[], []]\nNarquivo = [n0, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10,",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n57",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n57 = [[], []]\nn58 = [[], []]\nn59 = [[], []]\nn60 = [[], []]\nn61 = [[], []]\nn62 = [[], []]\nn63 = [[], []]\nn64 = [[], []]\nNarquivo = [n0, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10,\n            n11, n12, n13, n14, n15, n16, n17, n18, n9, n20,",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n58",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n58 = [[], []]\nn59 = [[], []]\nn60 = [[], []]\nn61 = [[], []]\nn62 = [[], []]\nn63 = [[], []]\nn64 = [[], []]\nNarquivo = [n0, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10,\n            n11, n12, n13, n14, n15, n16, n17, n18, n9, n20,\n            n21, n22, n23, n24, n25, n26, n27, n28, n29, n30,",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n59",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n59 = [[], []]\nn60 = [[], []]\nn61 = [[], []]\nn62 = [[], []]\nn63 = [[], []]\nn64 = [[], []]\nNarquivo = [n0, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10,\n            n11, n12, n13, n14, n15, n16, n17, n18, n9, n20,\n            n21, n22, n23, n24, n25, n26, n27, n28, n29, n30,\n            n31, n32, n33, n34, n35, n36, n37, n38, n39, n40,",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n60",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n60 = [[], []]\nn61 = [[], []]\nn62 = [[], []]\nn63 = [[], []]\nn64 = [[], []]\nNarquivo = [n0, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10,\n            n11, n12, n13, n14, n15, n16, n17, n18, n9, n20,\n            n21, n22, n23, n24, n25, n26, n27, n28, n29, n30,\n            n31, n32, n33, n34, n35, n36, n37, n38, n39, n40,\n            n41, n42, n43, n44, n45, n46, n47, n48, n49, n50,",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n61",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n61 = [[], []]\nn62 = [[], []]\nn63 = [[], []]\nn64 = [[], []]\nNarquivo = [n0, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10,\n            n11, n12, n13, n14, n15, n16, n17, n18, n9, n20,\n            n21, n22, n23, n24, n25, n26, n27, n28, n29, n30,\n            n31, n32, n33, n34, n35, n36, n37, n38, n39, n40,\n            n41, n42, n43, n44, n45, n46, n47, n48, n49, n50,\n            n51, n52, n53, n54, n55, n56, n57, n58, n59, n60,",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n62",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n62 = [[], []]\nn63 = [[], []]\nn64 = [[], []]\nNarquivo = [n0, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10,\n            n11, n12, n13, n14, n15, n16, n17, n18, n9, n20,\n            n21, n22, n23, n24, n25, n26, n27, n28, n29, n30,\n            n31, n32, n33, n34, n35, n36, n37, n38, n39, n40,\n            n41, n42, n43, n44, n45, n46, n47, n48, n49, n50,\n            n51, n52, n53, n54, n55, n56, n57, n58, n59, n60,\n            n61, n62, n63, n64]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n63",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n63 = [[], []]\nn64 = [[], []]\nNarquivo = [n0, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10,\n            n11, n12, n13, n14, n15, n16, n17, n18, n9, n20,\n            n21, n22, n23, n24, n25, n26, n27, n28, n29, n30,\n            n31, n32, n33, n34, n35, n36, n37, n38, n39, n40,\n            n41, n42, n43, n44, n45, n46, n47, n48, n49, n50,\n            n51, n52, n53, n54, n55, n56, n57, n58, n59, n60,\n            n61, n62, n63, n64]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "n64",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "n64 = [[], []]\nNarquivo = [n0, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10,\n            n11, n12, n13, n14, n15, n16, n17, n18, n9, n20,\n            n21, n22, n23, n24, n25, n26, n27, n28, n29, n30,\n            n31, n32, n33, n34, n35, n36, n37, n38, n39, n40,\n            n41, n42, n43, n44, n45, n46, n47, n48, n49, n50,\n            n51, n52, n53, n54, n55, n56, n57, n58, n59, n60,\n            n61, n62, n63, n64]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "Narquivo",
        "kind": 5,
        "importPath": "Calculo_Numerico.quad_arquivo",
        "description": "Calculo_Numerico.quad_arquivo",
        "peekOfCode": "Narquivo = [n0, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10,\n            n11, n12, n13, n14, n15, n16, n17, n18, n9, n20,\n            n21, n22, n23, n24, n25, n26, n27, n28, n29, n30,\n            n31, n32, n33, n34, n35, n36, n37, n38, n39, n40,\n            n41, n42, n43, n44, n45, n46, n47, n48, n49, n50,\n            n51, n52, n53, n54, n55, n56, n57, n58, n59, n60,\n            n61, n62, n63, n64]",
        "detail": "Calculo_Numerico.quad_arquivo",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Calculo_Numerico.quadratura",
        "description": "Calculo_Numerico.quadratura",
        "peekOfCode": "def f(x):\n    return (x**3)/3\ndef integral(x):\n    return (x**4)/12\ndef quadratura(a, b, n):\n    N = Narquivo[n]\n    A = N[0]\n    t = N[1]\n    dx = (b-a)/2\n    saida = 0",
        "detail": "Calculo_Numerico.quadratura",
        "documentation": {}
    },
    {
        "label": "integral",
        "kind": 2,
        "importPath": "Calculo_Numerico.quadratura",
        "description": "Calculo_Numerico.quadratura",
        "peekOfCode": "def integral(x):\n    return (x**4)/12\ndef quadratura(a, b, n):\n    N = Narquivo[n]\n    A = N[0]\n    t = N[1]\n    dx = (b-a)/2\n    saida = 0\n    for i in range(n):\n        x = t[i]*dx + (b+a)/2",
        "detail": "Calculo_Numerico.quadratura",
        "documentation": {}
    },
    {
        "label": "quadratura",
        "kind": 2,
        "importPath": "Calculo_Numerico.quadratura",
        "description": "Calculo_Numerico.quadratura",
        "peekOfCode": "def quadratura(a, b, n):\n    N = Narquivo[n]\n    A = N[0]\n    t = N[1]\n    dx = (b-a)/2\n    saida = 0\n    for i in range(n):\n        x = t[i]*dx + (b+a)/2\n        saida += A[i]*f(x)*dx\n    return saida",
        "detail": "Calculo_Numerico.quadratura",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Calculo_Numerico.secante",
        "description": "Calculo_Numerico.secante",
        "peekOfCode": "def f(x):\n    return math.e**x - 2*math.cos(x)\ndef sec(a, b):\n    return (f(a) - f(b)) / (a - b)\ndef secante(a, b, erro):\n    k = 0\n    while math.fabs(f(a)) > erro:\n        k += 1\n        c = a\n        a = (a - (f(a) / sec(a, b)))",
        "detail": "Calculo_Numerico.secante",
        "documentation": {}
    },
    {
        "label": "sec",
        "kind": 2,
        "importPath": "Calculo_Numerico.secante",
        "description": "Calculo_Numerico.secante",
        "peekOfCode": "def sec(a, b):\n    return (f(a) - f(b)) / (a - b)\ndef secante(a, b, erro):\n    k = 0\n    while math.fabs(f(a)) > erro:\n        k += 1\n        c = a\n        a = (a - (f(a) / sec(a, b)))\n        b = c\n    return a, k",
        "detail": "Calculo_Numerico.secante",
        "documentation": {}
    },
    {
        "label": "secante",
        "kind": 2,
        "importPath": "Calculo_Numerico.secante",
        "description": "Calculo_Numerico.secante",
        "peekOfCode": "def secante(a, b, erro):\n    k = 0\n    while math.fabs(f(a)) > erro:\n        k += 1\n        c = a\n        a = (a - (f(a) / sec(a, b)))\n        b = c\n    return a, k\na, b, erro = 0, 2, 10**(-15)\nx, k = secante(a, b, erro)",
        "detail": "Calculo_Numerico.secante",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Calculo_Numerico.simpson",
        "description": "Calculo_Numerico.simpson",
        "peekOfCode": "def f(x):\n    return math.exp(x)\ndef simpson(a, b):\n    h = (b - a)/2\n    saida = f(a) + 4*f(a+h) + f(b)\n    return saida*(h/3)\ndef simpson_composto(a, b, n):\n    if not n % 2 == 0:\n        return \"N deve ser par\"\n    h = (b - a)/n",
        "detail": "Calculo_Numerico.simpson",
        "documentation": {}
    },
    {
        "label": "simpson",
        "kind": 2,
        "importPath": "Calculo_Numerico.simpson",
        "description": "Calculo_Numerico.simpson",
        "peekOfCode": "def simpson(a, b):\n    h = (b - a)/2\n    saida = f(a) + 4*f(a+h) + f(b)\n    return saida*(h/3)\ndef simpson_composto(a, b, n):\n    if not n % 2 == 0:\n        return \"N deve ser par\"\n    h = (b - a)/n\n    saida0 = saida1 = 0\n    N = n//2",
        "detail": "Calculo_Numerico.simpson",
        "documentation": {}
    },
    {
        "label": "simpson_composto",
        "kind": 2,
        "importPath": "Calculo_Numerico.simpson",
        "description": "Calculo_Numerico.simpson",
        "peekOfCode": "def simpson_composto(a, b, n):\n    if not n % 2 == 0:\n        return \"N deve ser par\"\n    h = (b - a)/n\n    saida0 = saida1 = 0\n    N = n//2\n    for i in range(1, N):\n        saida0 += f(a + (2*i - 1)*h)\n        saida1 += f(a + 2*i*h)\n    saida0 += f(b - h)",
        "detail": "Calculo_Numerico.simpson",
        "documentation": {}
    },
    {
        "label": "simpson_preciso",
        "kind": 2,
        "importPath": "Calculo_Numerico.simpson",
        "description": "Calculo_Numerico.simpson",
        "peekOfCode": "def simpson_preciso(a, b, erro):\n    margem = simpson(a, b)\n    fx = - margem\n    n = 4\n    while abs(margem - fx) > erro:\n        margem = fx\n        fx = simpson_composto(a, b, n)\n        n += 2\n    return fx\na, b, n, erro = 0, 1, 4, 10**(-16)",
        "detail": "Calculo_Numerico.simpson",
        "documentation": {}
    },
    {
        "label": "F",
        "kind": 2,
        "importPath": "Calculo_Numerico.sistemas_nao_lineares",
        "description": "Calculo_Numerico.sistemas_nao_lineares",
        "peekOfCode": "def F(X):\n    R = [\n        X[0]*2 - X[1] - math.exp(- X[0]),\n        X[1]*2 - X[0] - math.exp(- X[1]),\n    ]\n    return R\ndef J(X, derivada=False):\n    if derivada:\n        R = [\n            [2 + math.exp(-X[0]), -1],",
        "detail": "Calculo_Numerico.sistemas_nao_lineares",
        "documentation": {}
    },
    {
        "label": "J",
        "kind": 2,
        "importPath": "Calculo_Numerico.sistemas_nao_lineares",
        "description": "Calculo_Numerico.sistemas_nao_lineares",
        "peekOfCode": "def J(X, derivada=False):\n    if derivada:\n        R = [\n            [2 + math.exp(-X[0]), -1],\n            [-1, 2 + math.exp(-X[1])],\n        ]\n    else:\n        R = Secante(X)\n    return R\ndef Secante(X, h=10**(-12)):",
        "detail": "Calculo_Numerico.sistemas_nao_lineares",
        "documentation": {}
    },
    {
        "label": "Secante",
        "kind": 2,
        "importPath": "Calculo_Numerico.sistemas_nao_lineares",
        "description": "Calculo_Numerico.sistemas_nao_lineares",
        "peekOfCode": "def Secante(X, h=10**(-12)):\n    N = len(X)\n    R = [0]*N\n    FX = F(X)\n    for i in range(N):\n        R[i] = [0]*N\n    for i in range(N):\n        temp_X = [x for x in X]\n        temp_X[i] += h\n        temp_FX = F(temp_X)",
        "detail": "Calculo_Numerico.sistemas_nao_lineares",
        "documentation": {}
    },
    {
        "label": "sistema",
        "kind": 2,
        "importPath": "Calculo_Numerico.sistemas_nao_lineares",
        "description": "Calculo_Numerico.sistemas_nao_lineares",
        "peekOfCode": "def sistema(X, erro):\n    n = len(X)\n    D = gauss.gauss_sem_pivo(J(X), F(X))\n    flag = True\n    for i in range(n):\n        X[i] -= D[i]\n        flag = flag and (abs(D[i]) < erro)\n    return X, flag\ndef Newton(X, erro):\n    k = 0",
        "detail": "Calculo_Numerico.sistemas_nao_lineares",
        "documentation": {}
    },
    {
        "label": "Newton",
        "kind": 2,
        "importPath": "Calculo_Numerico.sistemas_nao_lineares",
        "description": "Calculo_Numerico.sistemas_nao_lineares",
        "peekOfCode": "def Newton(X, erro):\n    k = 0\n    flag = False\n    while not flag:\n        k += 1\n        X, flag = sistema(X, erro)\n    return k, X\nx = [-5, -5]\nerro = 10**(-8)\nk, X = Newton(x, erro)",
        "detail": "Calculo_Numerico.sistemas_nao_lineares",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Calculo_Numerico.sistemas_nao_lineares",
        "description": "Calculo_Numerico.sistemas_nao_lineares",
        "peekOfCode": "x = [-5, -5]\nerro = 10**(-8)\nk, X = Newton(x, erro)\nprint(\"tentativas:\", k)\nprint(\"X =\\n\", X)\nprint(F(X)[0])\nprint(F(X)[1])",
        "detail": "Calculo_Numerico.sistemas_nao_lineares",
        "documentation": {}
    },
    {
        "label": "erro",
        "kind": 5,
        "importPath": "Calculo_Numerico.sistemas_nao_lineares",
        "description": "Calculo_Numerico.sistemas_nao_lineares",
        "peekOfCode": "erro = 10**(-8)\nk, X = Newton(x, erro)\nprint(\"tentativas:\", k)\nprint(\"X =\\n\", X)\nprint(F(X)[0])\nprint(F(X)[1])",
        "detail": "Calculo_Numerico.sistemas_nao_lineares",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Calculo_Numerico.trapezio",
        "description": "Calculo_Numerico.trapezio",
        "peekOfCode": "def f(x):\n    return math.exp(x)\ndef trapezio(a, b):\n    return (f(b) + f(a))*(b - a)/2\ndef trapezio_composto(a, b, n):\n    h = (b - a)/n\n    saida = 0\n    for i in range(1, n):\n        saida += f(a + i*h)\n    saida *= 2",
        "detail": "Calculo_Numerico.trapezio",
        "documentation": {}
    },
    {
        "label": "trapezio",
        "kind": 2,
        "importPath": "Calculo_Numerico.trapezio",
        "description": "Calculo_Numerico.trapezio",
        "peekOfCode": "def trapezio(a, b):\n    return (f(b) + f(a))*(b - a)/2\ndef trapezio_composto(a, b, n):\n    h = (b - a)/n\n    saida = 0\n    for i in range(1, n):\n        saida += f(a + i*h)\n    saida *= 2\n    saida = saida + f(a) + f(b)\n    return saida*h/2",
        "detail": "Calculo_Numerico.trapezio",
        "documentation": {}
    },
    {
        "label": "trapezio_composto",
        "kind": 2,
        "importPath": "Calculo_Numerico.trapezio",
        "description": "Calculo_Numerico.trapezio",
        "peekOfCode": "def trapezio_composto(a, b, n):\n    h = (b - a)/n\n    saida = 0\n    for i in range(1, n):\n        saida += f(a + i*h)\n    saida *= 2\n    saida = saida + f(a) + f(b)\n    return saida*h/2\ndef trapezio_preciso(a, b, erro):\n    margem = trapezio(a, b)",
        "detail": "Calculo_Numerico.trapezio",
        "documentation": {}
    },
    {
        "label": "trapezio_preciso",
        "kind": 2,
        "importPath": "Calculo_Numerico.trapezio",
        "description": "Calculo_Numerico.trapezio",
        "peekOfCode": "def trapezio_preciso(a, b, erro):\n    margem = trapezio(a, b)\n    fx = - margem\n    n = 2\n    while abs(margem - fx) > erro:\n        margem = fx\n        n += 2\n        fx = trapezio_composto(a, b, n)\n    return fx, n\na, b, n, erro = 0, 1, 30320, 10**(-16)",
        "detail": "Calculo_Numerico.trapezio",
        "documentation": {}
    },
    {
        "label": "pi",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_1011",
        "description": "Isolados.URI.URI_A.URI_1011",
        "peekOfCode": "pi = 3.14159\nR = float(input())\nesfera = (R**3)*pi*(4/3)\nprint(\"VOLUME = %.3f\" % (esfera))",
        "detail": "Isolados.URI.URI_A.URI_1011",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_1011",
        "description": "Isolados.URI.URI_A.URI_1011",
        "peekOfCode": "R = float(input())\nesfera = (R**3)*pi*(4/3)\nprint(\"VOLUME = %.3f\" % (esfera))",
        "detail": "Isolados.URI.URI_A.URI_1011",
        "documentation": {}
    },
    {
        "label": "esfera",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_1011",
        "description": "Isolados.URI.URI_A.URI_1011",
        "peekOfCode": "esfera = (R**3)*pi*(4/3)\nprint(\"VOLUME = %.3f\" % (esfera))",
        "detail": "Isolados.URI.URI_A.URI_1011",
        "documentation": {}
    },
    {
        "label": "print(\"VOLUME",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_1011",
        "description": "Isolados.URI.URI_A.URI_1011",
        "peekOfCode": "print(\"VOLUME = %.3f\" % (esfera))",
        "detail": "Isolados.URI.URI_A.URI_1011",
        "documentation": {}
    },
    {
        "label": "distancia",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_1014",
        "description": "Isolados.URI.URI_A.URI_1014",
        "peekOfCode": "distancia = int(input())\ngasto = float(input())\nrendimento = distancia/gasto\nprint(\"%.3f km/l\" % rendimento)",
        "detail": "Isolados.URI.URI_A.URI_1014",
        "documentation": {}
    },
    {
        "label": "gasto",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_1014",
        "description": "Isolados.URI.URI_A.URI_1014",
        "peekOfCode": "gasto = float(input())\nrendimento = distancia/gasto\nprint(\"%.3f km/l\" % rendimento)",
        "detail": "Isolados.URI.URI_A.URI_1014",
        "documentation": {}
    },
    {
        "label": "rendimento",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_1014",
        "description": "Isolados.URI.URI_A.URI_1014",
        "peekOfCode": "rendimento = distancia/gasto\nprint(\"%.3f km/l\" % rendimento)",
        "detail": "Isolados.URI.URI_A.URI_1014",
        "documentation": {}
    },
    {
        "label": "distancia",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_1015",
        "description": "Isolados.URI.URI_A.URI_1015",
        "peekOfCode": "distancia = ((x2 - x1)**2 + (y2 - y1)**2)**(0.5)\nprint(\"%.4f\" % (distancia))",
        "detail": "Isolados.URI.URI_A.URI_1015",
        "documentation": {}
    },
    {
        "label": "notas",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_1018",
        "description": "Isolados.URI.URI_A.URI_1018",
        "peekOfCode": "notas = [100, 50, 20, 10, 5, 2, 1]\nsaida = input()\nvalor = int(saida)\nfor i in notas:\n    resto = valor//i\n    valor %= i\n    saida += (\"%d nota(s) de R$ %d,00\\n\" % (resto, i))\nprint(saida)",
        "detail": "Isolados.URI.URI_A.URI_1018",
        "documentation": {}
    },
    {
        "label": "saida",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_1018",
        "description": "Isolados.URI.URI_A.URI_1018",
        "peekOfCode": "saida = input()\nvalor = int(saida)\nfor i in notas:\n    resto = valor//i\n    valor %= i\n    saida += (\"%d nota(s) de R$ %d,00\\n\" % (resto, i))\nprint(saida)",
        "detail": "Isolados.URI.URI_A.URI_1018",
        "documentation": {}
    },
    {
        "label": "valor",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_1018",
        "description": "Isolados.URI.URI_A.URI_1018",
        "peekOfCode": "valor = int(saida)\nfor i in notas:\n    resto = valor//i\n    valor %= i\n    saida += (\"%d nota(s) de R$ %d,00\\n\" % (resto, i))\nprint(saida)",
        "detail": "Isolados.URI.URI_A.URI_1018",
        "documentation": {}
    },
    {
        "label": "encripty_str",
        "kind": 2,
        "importPath": "Isolados.URI.URI_A.URI_1024",
        "description": "Isolados.URI.URI_A.URI_1024",
        "peekOfCode": "def encripty_str(string0):\n    texto = list(string0)\n    L = len(texto)\n    meio = L//2\n    texto.reverse()\n    for i in range(L):\n        cond0 = int(texto[i].isalpha())\n        cond1 = int(i >= meio)\n        texto[i] = chr(ord(texto[i]) + 3*cond0 - cond1)\n    return ''.join(texto)",
        "detail": "Isolados.URI.URI_A.URI_1024",
        "documentation": {}
    },
    {
        "label": "casos",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_1024",
        "description": "Isolados.URI.URI_A.URI_1024",
        "peekOfCode": "casos = int(input())\nsaida = \"\"\nfor _ in range(casos):\n    saida += (encripty_str(input())) + \"\\n\"\nprint(saida)",
        "detail": "Isolados.URI.URI_A.URI_1024",
        "documentation": {}
    },
    {
        "label": "saida",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_1024",
        "description": "Isolados.URI.URI_A.URI_1024",
        "peekOfCode": "saida = \"\"\nfor _ in range(casos):\n    saida += (encripty_str(input())) + \"\\n\"\nprint(saida)",
        "detail": "Isolados.URI.URI_A.URI_1024",
        "documentation": {}
    },
    {
        "label": "saidas",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_1091",
        "description": "Isolados.URI.URI_A.URI_1091",
        "peekOfCode": "saidas = [\"divisa\\n\", \"SO\\n\", \"SE\\n\", \"NO\\n\", \"NE\\n\"]\noutput = \"\"\nwhile True:\n    consultas = int(input())\n    if consultas == 0:\n        break\n    n, m = input().split()\n    n, m = int(n), int(m)\n    for _ in range(consultas):\n        x, y = [int(i) for i in input().split()]",
        "detail": "Isolados.URI.URI_A.URI_1091",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_1091",
        "description": "Isolados.URI.URI_A.URI_1091",
        "peekOfCode": "output = \"\"\nwhile True:\n    consultas = int(input())\n    if consultas == 0:\n        break\n    n, m = input().split()\n    n, m = int(n), int(m)\n    for _ in range(consultas):\n        x, y = [int(i) for i in input().split()]\n        # divisa",
        "detail": "Isolados.URI.URI_A.URI_1091",
        "documentation": {}
    },
    {
        "label": "casos",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_1094",
        "description": "Isolados.URI.URI_A.URI_1094",
        "peekOfCode": "casos = int(input())\ntipos = {\"C\": 0, \"R\": 0, \"S\": 0}\nfor _ in range(casos):\n    experiencia = input().split()\n    tipos[experiencia[1]] += int(experiencia[0])\ntotal = tipos[\"C\"] + tipos[\"R\"] + tipos[\"S\"]\nprint(\"Total:\", total, \"cobaias\")\nprint(\"Total de coelhos:\", tipos[\"C\"])\nprint(\"Total de ratos:\", tipos[\"R\"])\nprint(\"Total de sapos:\", tipos[\"S\"])",
        "detail": "Isolados.URI.URI_A.URI_1094",
        "documentation": {}
    },
    {
        "label": "tipos",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_1094",
        "description": "Isolados.URI.URI_A.URI_1094",
        "peekOfCode": "tipos = {\"C\": 0, \"R\": 0, \"S\": 0}\nfor _ in range(casos):\n    experiencia = input().split()\n    tipos[experiencia[1]] += int(experiencia[0])\ntotal = tipos[\"C\"] + tipos[\"R\"] + tipos[\"S\"]\nprint(\"Total:\", total, \"cobaias\")\nprint(\"Total de coelhos:\", tipos[\"C\"])\nprint(\"Total de ratos:\", tipos[\"R\"])\nprint(\"Total de sapos:\", tipos[\"S\"])\nprint(\"Percentual de coelhos: %.2f %%\" % (100*tipos[\"C\"]/total))",
        "detail": "Isolados.URI.URI_A.URI_1094",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_1094",
        "description": "Isolados.URI.URI_A.URI_1094",
        "peekOfCode": "total = tipos[\"C\"] + tipos[\"R\"] + tipos[\"S\"]\nprint(\"Total:\", total, \"cobaias\")\nprint(\"Total de coelhos:\", tipos[\"C\"])\nprint(\"Total de ratos:\", tipos[\"R\"])\nprint(\"Total de sapos:\", tipos[\"S\"])\nprint(\"Percentual de coelhos: %.2f %%\" % (100*tipos[\"C\"]/total))\nprint(\"Percentual de ratos: %.2f %%\" % (100*tipos[\"R\"]/total))\nprint(\"Percentual de sapos: %.2f %%\" % (100*tipos[\"S\"]/total))",
        "detail": "Isolados.URI.URI_A.URI_1094",
        "documentation": {}
    },
    {
        "label": "saida",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_1103",
        "description": "Isolados.URI.URI_A.URI_1103",
        "peekOfCode": "saida = \"\"\nwhile True:\n    entr = input().split()\n    if entr[0] == entr[1] == entr[2] == entr[3] == '0':\n        break\n    t1 = int(entr[0])*60 + int(entr[1])\n    t2 = int(entr[2])*60 + int(entr[3])\n    saida += str((t2 - t1) % 1440)\nprint(saida)",
        "detail": "Isolados.URI.URI_A.URI_1103",
        "documentation": {}
    },
    {
        "label": "const_limiar",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_1129",
        "description": "Isolados.URI.URI_A.URI_1129",
        "peekOfCode": "const_limiar = 127\nconst_A = ord(\"A\")\nconst_ast = ord(\"*\")\nsaida = \"\"\nwhile True:\n    questoes = int(input())\n    if questoes == 0:\n        break\n    for _ in range(questoes):\n        pergunta = input().split()",
        "detail": "Isolados.URI.URI_A.URI_1129",
        "documentation": {}
    },
    {
        "label": "const_A",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_1129",
        "description": "Isolados.URI.URI_A.URI_1129",
        "peekOfCode": "const_A = ord(\"A\")\nconst_ast = ord(\"*\")\nsaida = \"\"\nwhile True:\n    questoes = int(input())\n    if questoes == 0:\n        break\n    for _ in range(questoes):\n        pergunta = input().split()\n        cont = 0",
        "detail": "Isolados.URI.URI_A.URI_1129",
        "documentation": {}
    },
    {
        "label": "const_ast",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_1129",
        "description": "Isolados.URI.URI_A.URI_1129",
        "peekOfCode": "const_ast = ord(\"*\")\nsaida = \"\"\nwhile True:\n    questoes = int(input())\n    if questoes == 0:\n        break\n    for _ in range(questoes):\n        pergunta = input().split()\n        cont = 0\n        resp = [0, const_ast]",
        "detail": "Isolados.URI.URI_A.URI_1129",
        "documentation": {}
    },
    {
        "label": "saida",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_1129",
        "description": "Isolados.URI.URI_A.URI_1129",
        "peekOfCode": "saida = \"\"\nwhile True:\n    questoes = int(input())\n    if questoes == 0:\n        break\n    for _ in range(questoes):\n        pergunta = input().split()\n        cont = 0\n        resp = [0, const_ast]\n        opcoes = len(pergunta)",
        "detail": "Isolados.URI.URI_A.URI_1129",
        "documentation": {}
    },
    {
        "label": "saida",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_1387",
        "description": "Isolados.URI.URI_A.URI_1387",
        "peekOfCode": "saida = \"\"\nwhile True:\n    e, r = input().split()\n    if e == r == '0':\n        break\n    saida += str(int(e) + int(r))\nprint(saida)",
        "detail": "Isolados.URI.URI_A.URI_1387",
        "documentation": {}
    },
    {
        "label": "notas",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_2187",
        "description": "Isolados.URI.URI_A.URI_2187",
        "peekOfCode": "notas = {50: 0, 10: 0, 5: 0, 1: 0}\nteste = 1\nsaida = \"\"\nwhile True:\n    valor = int(input())\n    if valor == 0:\n        break\n    saida += (\"Teste %d\\n\" % teste)\n    teste += 1\n    notas[50] = notas[10] = 0",
        "detail": "Isolados.URI.URI_A.URI_2187",
        "documentation": {}
    },
    {
        "label": "teste",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_2187",
        "description": "Isolados.URI.URI_A.URI_2187",
        "peekOfCode": "teste = 1\nsaida = \"\"\nwhile True:\n    valor = int(input())\n    if valor == 0:\n        break\n    saida += (\"Teste %d\\n\" % teste)\n    teste += 1\n    notas[50] = notas[10] = 0\n    notas[5] = notas[1] = 0",
        "detail": "Isolados.URI.URI_A.URI_2187",
        "documentation": {}
    },
    {
        "label": "saida",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_2187",
        "description": "Isolados.URI.URI_A.URI_2187",
        "peekOfCode": "saida = \"\"\nwhile True:\n    valor = int(input())\n    if valor == 0:\n        break\n    saida += (\"Teste %d\\n\" % teste)\n    teste += 1\n    notas[50] = notas[10] = 0\n    notas[5] = notas[1] = 0\n    for i in notas.keys():",
        "detail": "Isolados.URI.URI_A.URI_2187",
        "documentation": {}
    },
    {
        "label": "saida",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_2392",
        "description": "Isolados.URI.URI_A.URI_2392",
        "peekOfCode": "saida = [0]*(Npedras + 1)\nfor i in range(Nsapos):\n    pedraI, pulo = [int(i) for i in input().split()]\n    saida[pedraI] = 1\n    for j in range(pedraI, Npedras+1, pulo):\n        saida[j] = 1\n    for j in range(pedraI, 0, -pulo):\n        saida[j] = 1\nfor i in range(1, Npedras+1):\n    print(saida[i])",
        "detail": "Isolados.URI.URI_A.URI_2392",
        "documentation": {}
    },
    {
        "label": "min",
        "kind": 2,
        "importPath": "Isolados.URI.URI_A.URI_2423",
        "description": "Isolados.URI.URI_A.URI_2423",
        "peekOfCode": "def min(A, B, C):\n    cond1 = int(A <= B and A <= C)\n    cond2 = int(B <= A and B <= C)\n    cond3 = int(C <= A and C <= B)\n    saida = [A, B, C]\n    indice = (3*cond1 + cond2 + 2*cond3 - cond2*cond3) % 3\n    return saida[indice]\nentr = input().split()\nA = int(entr[0])//2\nB = int(entr[1])//3",
        "detail": "Isolados.URI.URI_A.URI_2423",
        "documentation": {}
    },
    {
        "label": "entr",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_2423",
        "description": "Isolados.URI.URI_A.URI_2423",
        "peekOfCode": "entr = input().split()\nA = int(entr[0])//2\nB = int(entr[1])//3\nC = int(entr[2])//5\nprint(min(A, B, C))",
        "detail": "Isolados.URI.URI_A.URI_2423",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_2423",
        "description": "Isolados.URI.URI_A.URI_2423",
        "peekOfCode": "A = int(entr[0])//2\nB = int(entr[1])//3\nC = int(entr[2])//5\nprint(min(A, B, C))",
        "detail": "Isolados.URI.URI_A.URI_2423",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_2423",
        "description": "Isolados.URI.URI_A.URI_2423",
        "peekOfCode": "B = int(entr[1])//3\nC = int(entr[2])//5\nprint(min(A, B, C))",
        "detail": "Isolados.URI.URI_A.URI_2423",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_2423",
        "description": "Isolados.URI.URI_A.URI_2423",
        "peekOfCode": "C = int(entr[2])//5\nprint(min(A, B, C))",
        "detail": "Isolados.URI.URI_A.URI_2423",
        "documentation": {}
    },
    {
        "label": "limite_x",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_2424",
        "description": "Isolados.URI.URI_A.URI_2424",
        "peekOfCode": "limite_x = 432\nlimite_y = 468\nsaida = [\"fora\", \"dentro\"]\nx, y = [int(i) for i in input().split()]\nc1 = x >= 0 and x <= limite_x\nc1 = c1 and y >= 0 and y <= limite_y\nprint(saida[int(c1)])",
        "detail": "Isolados.URI.URI_A.URI_2424",
        "documentation": {}
    },
    {
        "label": "limite_y",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_2424",
        "description": "Isolados.URI.URI_A.URI_2424",
        "peekOfCode": "limite_y = 468\nsaida = [\"fora\", \"dentro\"]\nx, y = [int(i) for i in input().split()]\nc1 = x >= 0 and x <= limite_x\nc1 = c1 and y >= 0 and y <= limite_y\nprint(saida[int(c1)])",
        "detail": "Isolados.URI.URI_A.URI_2424",
        "documentation": {}
    },
    {
        "label": "saida",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_2424",
        "description": "Isolados.URI.URI_A.URI_2424",
        "peekOfCode": "saida = [\"fora\", \"dentro\"]\nx, y = [int(i) for i in input().split()]\nc1 = x >= 0 and x <= limite_x\nc1 = c1 and y >= 0 and y <= limite_y\nprint(saida[int(c1)])",
        "detail": "Isolados.URI.URI_A.URI_2424",
        "documentation": {}
    },
    {
        "label": "c1",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_2424",
        "description": "Isolados.URI.URI_A.URI_2424",
        "peekOfCode": "c1 = x >= 0 and x <= limite_x\nc1 = c1 and y >= 0 and y <= limite_y\nprint(saida[int(c1)])",
        "detail": "Isolados.URI.URI_A.URI_2424",
        "documentation": {}
    },
    {
        "label": "c1",
        "kind": 5,
        "importPath": "Isolados.URI.URI_A.URI_2424",
        "description": "Isolados.URI.URI_A.URI_2424",
        "peekOfCode": "c1 = c1 and y >= 0 and y <= limite_y\nprint(saida[int(c1)])",
        "detail": "Isolados.URI.URI_A.URI_2424",
        "documentation": {}
    },
    {
        "label": "caso",
        "kind": 5,
        "importPath": "Isolados.URI.URI_B.URI_1025",
        "description": "Isolados.URI.URI_B.URI_1025",
        "peekOfCode": "caso = 1\nsaida = \"\"\nwhile True:\n    Npecas, Nquestions = (int(i) for i in input().split())\n    if Npecas == Nquestions == 0:\n        break\n    Marbles = []\n    for i in range(Npecas):\n        N = int(input())\n        bisect.insort(Marbles, N)",
        "detail": "Isolados.URI.URI_B.URI_1025",
        "documentation": {}
    },
    {
        "label": "saida",
        "kind": 5,
        "importPath": "Isolados.URI.URI_B.URI_1025",
        "description": "Isolados.URI.URI_B.URI_1025",
        "peekOfCode": "saida = \"\"\nwhile True:\n    Npecas, Nquestions = (int(i) for i in input().split())\n    if Npecas == Nquestions == 0:\n        break\n    Marbles = []\n    for i in range(Npecas):\n        N = int(input())\n        bisect.insort(Marbles, N)\n    saida += (\"CASE# %d:\\n\" % (caso))",
        "detail": "Isolados.URI.URI_B.URI_1025",
        "documentation": {}
    },
    {
        "label": "fibonacci",
        "kind": 2,
        "importPath": "Isolados.Euclides",
        "description": "Isolados.Euclides",
        "peekOfCode": "def fibonacci(n):\n    raiz_de_5 = 5**(0.5)\n    u = 1/raiz_de_5\n    x1 = (1 + raiz_de_5)/2\n    x2 = (1 - raiz_de_5)/2\n    x1 = x1**n\n    x2 = x2**n\n    v = (x1 - x2)//raiz_de_5\n    return v\nprint(fibonacci(2))",
        "detail": "Isolados.Euclides",
        "documentation": {}
    },
    {
        "label": "euclides",
        "kind": 2,
        "importPath": "Isolados.Euclides",
        "description": "Isolados.Euclides",
        "peekOfCode": "def euclides(a, b):\n    while b != 0:\n        a, b = b, a%b\n    return a\ndef euclides_estendido(a, b):\n    if b == 0:\n        return a, 0, 1\n    else:\n        mdc, x, y = euclides_estendido(b, a%b)\n        return mdc, y-(a//b)*x, x",
        "detail": "Isolados.Euclides",
        "documentation": {}
    },
    {
        "label": "euclides_estendido",
        "kind": 2,
        "importPath": "Isolados.Euclides",
        "description": "Isolados.Euclides",
        "peekOfCode": "def euclides_estendido(a, b):\n    if b == 0:\n        return a, 0, 1\n    else:\n        mdc, x, y = euclides_estendido(b, a%b)\n        return mdc, y-(a//b)*x, x",
        "detail": "Isolados.Euclides",
        "documentation": {}
    },
    {
        "label": "abcm",
        "kind": 5,
        "importPath": "Isolados.cifra_de_cesar",
        "description": "Isolados.cifra_de_cesar",
        "peekOfCode": "abcm = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\"]\nabcd = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nseletor = [abcm, abcd]\ncd = int(input())\nwhile True:\n    try:\n        m = (input().lower()).split()\n        N = len(m)\n        for i in range(0, N):\n            l = seletor[cd].index(m[i])",
        "detail": "Isolados.cifra_de_cesar",
        "documentation": {}
    },
    {
        "label": "abcd",
        "kind": 5,
        "importPath": "Isolados.cifra_de_cesar",
        "description": "Isolados.cifra_de_cesar",
        "peekOfCode": "abcd = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nseletor = [abcm, abcd]\ncd = int(input())\nwhile True:\n    try:\n        m = (input().lower()).split()\n        N = len(m)\n        for i in range(0, N):\n            l = seletor[cd].index(m[i])\n            m[i] = seletor[cd][l + 3 - 6*cd]",
        "detail": "Isolados.cifra_de_cesar",
        "documentation": {}
    },
    {
        "label": "seletor",
        "kind": 5,
        "importPath": "Isolados.cifra_de_cesar",
        "description": "Isolados.cifra_de_cesar",
        "peekOfCode": "seletor = [abcm, abcd]\ncd = int(input())\nwhile True:\n    try:\n        m = (input().lower()).split()\n        N = len(m)\n        for i in range(0, N):\n            l = seletor[cd].index(m[i])\n            m[i] = seletor[cd][l + 3 - 6*cd]\n        print(\"\".join(m))",
        "detail": "Isolados.cifra_de_cesar",
        "documentation": {}
    },
    {
        "label": "cd",
        "kind": 5,
        "importPath": "Isolados.cifra_de_cesar",
        "description": "Isolados.cifra_de_cesar",
        "peekOfCode": "cd = int(input())\nwhile True:\n    try:\n        m = (input().lower()).split()\n        N = len(m)\n        for i in range(0, N):\n            l = seletor[cd].index(m[i])\n            m[i] = seletor[cd][l + 3 - 6*cd]\n        print(\"\".join(m))\n    except EOFError:",
        "detail": "Isolados.cifra_de_cesar",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "Isolados.exemplo_JSON",
        "description": "Isolados.exemplo_JSON",
        "peekOfCode": "class App:\n    def __init__(self, dados):\n        self.__dados = IParse(dados)\nclass IParse:\n    def __init__(self, dados):\n        self.__dados = dados\n    def parse(self, arq:dict):\n        return arq\nclass JSONParser(IParse):\n    def __init__(self, url:str):",
        "detail": "Isolados.exemplo_JSON",
        "documentation": {}
    },
    {
        "label": "IParse",
        "kind": 6,
        "importPath": "Isolados.exemplo_JSON",
        "description": "Isolados.exemplo_JSON",
        "peekOfCode": "class IParse:\n    def __init__(self, dados):\n        self.__dados = dados\n    def parse(self, arq:dict):\n        return arq\nclass JSONParser(IParse):\n    def __init__(self, url:str):\n        self.__arq = json.loads(json.dumps(url))\n    def parse(self):\n        super().parse(self.__arq)",
        "detail": "Isolados.exemplo_JSON",
        "documentation": {}
    },
    {
        "label": "JSONParser",
        "kind": 6,
        "importPath": "Isolados.exemplo_JSON",
        "description": "Isolados.exemplo_JSON",
        "peekOfCode": "class JSONParser(IParse):\n    def __init__(self, url:str):\n        self.__arq = json.loads(json.dumps(url))\n    def parse(self):\n        super().parse(self.__arq)\nclass CSVParser(IParse):\n    def __init__(self, arq):\n        self.__arq = arq\n    def parse(self):\n        a = CSVAdapter(list(self.__arq))",
        "detail": "Isolados.exemplo_JSON",
        "documentation": {}
    },
    {
        "label": "CSVParser",
        "kind": 6,
        "importPath": "Isolados.exemplo_JSON",
        "description": "Isolados.exemplo_JSON",
        "peekOfCode": "class CSVParser(IParse):\n    def __init__(self, arq):\n        self.__arq = arq\n    def parse(self):\n        a = CSVAdapter(list(self.__arq))\n        super().parse(a.parse())\nclass CSVAdapter(CSVParser):\n    def __init__(self, lista):\n        L = len(lista)\n        self.__r = {}",
        "detail": "Isolados.exemplo_JSON",
        "documentation": {}
    },
    {
        "label": "CSVAdapter",
        "kind": 6,
        "importPath": "Isolados.exemplo_JSON",
        "description": "Isolados.exemplo_JSON",
        "peekOfCode": "class CSVAdapter(CSVParser):\n    def __init__(self, lista):\n        L = len(lista)\n        self.__r = {}\n        for i in range(0, L, 2):\n            self.__r[lista[i]] = lista[i+1]\n    def parse(self, arq):\n        return self.__r",
        "detail": "Isolados.exemplo_JSON",
        "documentation": {}
    },
    {
        "label": "produbool",
        "kind": 2,
        "importPath": "Isolados.produto_de_matrizes",
        "description": "Isolados.produto_de_matrizes",
        "peekOfCode": "def produbool(a, b, c, d):\n    resultado = 0\n    N = len(a[b])\n    for i in range(N):\n        resultado = resultado or (a[b][i] and c[d][i])\n    return resultado\ndef produlc(a, b, c, d):\n    resultado = 0\n    N = len(a[b])\n    for i in range(N):",
        "detail": "Isolados.produto_de_matrizes",
        "documentation": {}
    },
    {
        "label": "produlc",
        "kind": 2,
        "importPath": "Isolados.produto_de_matrizes",
        "description": "Isolados.produto_de_matrizes",
        "peekOfCode": "def produlc(a, b, c, d):\n    resultado = 0\n    N = len(a[b])\n    for i in range(N):\n        resultado += a[b][i] * c[d][i]\n    return resultado\noperacao = input()\nn, m = (int(i) for i in input().split())\nmat1 = [None]*n\nfor i in range(n):",
        "detail": "Isolados.produto_de_matrizes",
        "documentation": {}
    },
    {
        "label": "operacao",
        "kind": 5,
        "importPath": "Isolados.produto_de_matrizes",
        "description": "Isolados.produto_de_matrizes",
        "peekOfCode": "operacao = input()\nn, m = (int(i) for i in input().split())\nmat1 = [None]*n\nfor i in range(n):\n    mat1[i] = (int(j) for j in input().split())\nmat2 = [None]*m\nfor i in range(m):\n    mat2[i] = (int(j) for j in input().split())\nfor g in range(n):\n    for h in range(n):",
        "detail": "Isolados.produto_de_matrizes",
        "documentation": {}
    },
    {
        "label": "mat1",
        "kind": 5,
        "importPath": "Isolados.produto_de_matrizes",
        "description": "Isolados.produto_de_matrizes",
        "peekOfCode": "mat1 = [None]*n\nfor i in range(n):\n    mat1[i] = (int(j) for j in input().split())\nmat2 = [None]*m\nfor i in range(m):\n    mat2[i] = (int(j) for j in input().split())\nfor g in range(n):\n    for h in range(n):\n        if operacao == \"bool\":\n            print(produbool(mat1, g, mat2, h), end=' ')",
        "detail": "Isolados.produto_de_matrizes",
        "documentation": {}
    },
    {
        "label": "mat2",
        "kind": 5,
        "importPath": "Isolados.produto_de_matrizes",
        "description": "Isolados.produto_de_matrizes",
        "peekOfCode": "mat2 = [None]*m\nfor i in range(m):\n    mat2[i] = (int(j) for j in input().split())\nfor g in range(n):\n    for h in range(n):\n        if operacao == \"bool\":\n            print(produbool(mat1, g, mat2, h), end=' ')\n        else:\n            print(produlc(mat1, g, mat2, h), end=' ')\n    print()",
        "detail": "Isolados.produto_de_matrizes",
        "documentation": {}
    },
    {
        "label": "CalcularIMC",
        "kind": 2,
        "importPath": "Isolados.teste",
        "description": "Isolados.teste",
        "peekOfCode": "def CalcularIMC(valores):\n    alturaStr = valores('altura').replace('','',\"\").replace(\".\",\"\")\n    peso = float(valores['peso'])\n    altura = float(alturaStr)/100\n    imc = peso / (altura*altura)\n    return round(imc, 2)\nl0 = [sg.Text(\"Qual o seu peso?\"), sg.InputText('', key='peso'), sg.Text('Kg')]\nl1 = [sg.Text(\"Qual a sua altura?\"), sg.InputText('', key= 'altura'), sg.Text('cm')]\nl2 = [sg.Text('Seu IMC é'), sg.Text('', key='imc', size=(6,1))]\nl3 = [sg.Text('', size=(14,1)), sg.Button('Calcular IMC')]",
        "detail": "Isolados.teste",
        "documentation": {}
    },
    {
        "label": "arquivo",
        "kind": 5,
        "importPath": "Isolados.teste",
        "description": "Isolados.teste",
        "peekOfCode": "arquivo = open('arq01.txt','w')\narquivo.write(\"Bóson Treinamentos\\n\")\narquivo.write(\"Criando um arquivo de texto com Python\\n\")\narquivo.write(\"Arquivo criado por Fábio dos Reis\\n\")\narquivo.write(\"É isso ai pessoal!\\n\")\narquivo.close()\n# Lendo o arquivo criado:\narquivo = open('arq01.txt','r')\nfor linha in arquivo:\n    linha = linha.rstrip()",
        "detail": "Isolados.teste",
        "documentation": {}
    },
    {
        "label": "arquivo",
        "kind": 5,
        "importPath": "Isolados.teste",
        "description": "Isolados.teste",
        "peekOfCode": "arquivo = open('arq01.txt','r')\nfor linha in arquivo:\n    linha = linha.rstrip()\n    print (linha)\narquivo.close()\n'''\nimport PySimpleGUI as sg\ndef CalcularIMC(valores):\n    alturaStr = valores('altura').replace('','',\"\").replace(\".\",\"\")\n    peso = float(valores['peso'])",
        "detail": "Isolados.teste",
        "documentation": {}
    },
    {
        "label": "l0",
        "kind": 5,
        "importPath": "Isolados.teste",
        "description": "Isolados.teste",
        "peekOfCode": "l0 = [sg.Text(\"Qual o seu peso?\"), sg.InputText('', key='peso'), sg.Text('Kg')]\nl1 = [sg.Text(\"Qual a sua altura?\"), sg.InputText('', key= 'altura'), sg.Text('cm')]\nl2 = [sg.Text('Seu IMC é'), sg.Text('', key='imc', size=(6,1))]\nl3 = [sg.Text('', size=(14,1)), sg.Button('Calcular IMC')]\ncontainer = [l0, l1, l2, l3]\njanela = sg.Window('Calculadora de IMC', container, font=('Helvetica', 14))\nrodando = True\nwhile rodando:\n    eventos, valores = window.read()\n    print(valores)",
        "detail": "Isolados.teste",
        "documentation": {}
    },
    {
        "label": "l1",
        "kind": 5,
        "importPath": "Isolados.teste",
        "description": "Isolados.teste",
        "peekOfCode": "l1 = [sg.Text(\"Qual a sua altura?\"), sg.InputText('', key= 'altura'), sg.Text('cm')]\nl2 = [sg.Text('Seu IMC é'), sg.Text('', key='imc', size=(6,1))]\nl3 = [sg.Text('', size=(14,1)), sg.Button('Calcular IMC')]\ncontainer = [l0, l1, l2, l3]\njanela = sg.Window('Calculadora de IMC', container, font=('Helvetica', 14))\nrodando = True\nwhile rodando:\n    eventos, valores = window.read()\n    print(valores)\n    if eventos == sg.WIN_CLOSED:",
        "detail": "Isolados.teste",
        "documentation": {}
    },
    {
        "label": "l2",
        "kind": 5,
        "importPath": "Isolados.teste",
        "description": "Isolados.teste",
        "peekOfCode": "l2 = [sg.Text('Seu IMC é'), sg.Text('', key='imc', size=(6,1))]\nl3 = [sg.Text('', size=(14,1)), sg.Button('Calcular IMC')]\ncontainer = [l0, l1, l2, l3]\njanela = sg.Window('Calculadora de IMC', container, font=('Helvetica', 14))\nrodando = True\nwhile rodando:\n    eventos, valores = window.read()\n    print(valores)\n    if eventos == sg.WIN_CLOSED:\n        rodando = False",
        "detail": "Isolados.teste",
        "documentation": {}
    },
    {
        "label": "l3",
        "kind": 5,
        "importPath": "Isolados.teste",
        "description": "Isolados.teste",
        "peekOfCode": "l3 = [sg.Text('', size=(14,1)), sg.Button('Calcular IMC')]\ncontainer = [l0, l1, l2, l3]\njanela = sg.Window('Calculadora de IMC', container, font=('Helvetica', 14))\nrodando = True\nwhile rodando:\n    eventos, valores = window.read()\n    print(valores)\n    if eventos == sg.WIN_CLOSED:\n        rodando = False\n    elif eventos == 'Calcular IMC':",
        "detail": "Isolados.teste",
        "documentation": {}
    },
    {
        "label": "container",
        "kind": 5,
        "importPath": "Isolados.teste",
        "description": "Isolados.teste",
        "peekOfCode": "container = [l0, l1, l2, l3]\njanela = sg.Window('Calculadora de IMC', container, font=('Helvetica', 14))\nrodando = True\nwhile rodando:\n    eventos, valores = window.read()\n    print(valores)\n    if eventos == sg.WIN_CLOSED:\n        rodando = False\n    elif eventos == 'Calcular IMC':\n        imc = CalcularIMC(valores)",
        "detail": "Isolados.teste",
        "documentation": {}
    },
    {
        "label": "janela",
        "kind": 5,
        "importPath": "Isolados.teste",
        "description": "Isolados.teste",
        "peekOfCode": "janela = sg.Window('Calculadora de IMC', container, font=('Helvetica', 14))\nrodando = True\nwhile rodando:\n    eventos, valores = window.read()\n    print(valores)\n    if eventos == sg.WIN_CLOSED:\n        rodando = False\n    elif eventos == 'Calcular IMC':\n        imc = CalcularIMC(valores)\n        janela.Element('imc').Update(imc)",
        "detail": "Isolados.teste",
        "documentation": {}
    },
    {
        "label": "rodando",
        "kind": 5,
        "importPath": "Isolados.teste",
        "description": "Isolados.teste",
        "peekOfCode": "rodando = True\nwhile rodando:\n    eventos, valores = window.read()\n    print(valores)\n    if eventos == sg.WIN_CLOSED:\n        rodando = False\n    elif eventos == 'Calcular IMC':\n        imc = CalcularIMC(valores)\n        janela.Element('imc').Update(imc)\njanela.close",
        "detail": "Isolados.teste",
        "documentation": {}
    }
]